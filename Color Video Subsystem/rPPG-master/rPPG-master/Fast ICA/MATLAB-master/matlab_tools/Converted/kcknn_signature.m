%kcknn_signature 'Create a signature for a class for K-Nearest Neighbors classification'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros cknn_signature.pane file
%
% Parameters: 
% InputFile: isample 'Input Sample', required: 'input image file with the sample'
% OutputFile: osig 'Output Signature', required: 'output file with the signature'
% Toggle: useall 'Use all data in the samples', default: 0: 'if set will use all the data in the samples (no reduction)'
% Integer: ppoints 'Cluster the data to get a percentage of the input points', default: 10: 'the percentage of input points that will be used as signatures'
% Integer: minpoints 'Minimum of points if percentage is chosen', default: 10: 'when reducing to a percentage do no less than this minimum'
% Integer: npoints 'Cluster the data to get a subsample of points:', default: 10: 'integer value for the number of points to be used'
%
% Example: osig = kcknn_signature(isample, {'isample','';'osig','';'useall',0;'ppoints',10;'minpoints',10;'npoints',10})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% cknn_signature - Create a signature for a class for K-Nearest Neighbors classification
%
%  DESCRIPTION
% This routine creates a signature for the K-Nearest Neighbors classifier from a ROI or sample image. Since the K-Nearest Neighbors is a non-parametric classifier, it does not have signatures on the sense of a set of data that represents the features for a class, but we will use the term "signatures" anyway.
% Signatures for the K-Nearest Neighbors classifier consist of the data points themselves or a selected subset of them. Since the classifier will compare each point in the image with all prototypes in the signature, large signatures mean slow classification. To reduce classification time, a significant subset of points could be chosen to represent the class. This subset can be chosen by clustering the data points, which can be done if the parameter [-npoints] is passed (in this case clustering will be done to create npoints points, which will be used as signatures). 
% Alternatively instead of a fixed number, a proportion of the input data can be used if the parameter [-ppoints] is passed with the parameter [-minpoints] - in this case clustering will create pppoints percent of the original data size but with no less than minpoints.
% If the parameter [-useall] is passed, then the routine will use all points on the data instead of reducing them. 
% The dimensions of the signature for the K-Nearest Neighbors classifier will be Nx1x1x1xF where N is the final number of samples chosen (variable) and F the number of features or bands in the image.
% Since the signature has a variable size, it should be appended in blocks with the "csigappend" operator for classification with the \fIcknn_classify\fP operator.
% Signature contents can be printed in tables with the "cknn_printsig" operator.
%
%  
%
%  EXAMPLES
% All examples for the Classify toolbox are listed on the Classify Toolbox Manual. For an example of this operator, please see the Classify:workspaces:KNN or Classify:workspaces:KNN-Signatures example workspaces.
%
%  "SEE ALSO"
% cknn_classify, csigappend
%
%  RESTRICTIONS 
%
%  REFERENCES 
% All references for the Classify toolbox are listed on the Classify Toolbox Manual.
%
%  COPYRIGHT
% Copyright (C) 1997 Rafael Santos. Khoros (C) Khoral Research, Inc.
% 


function varargout = kcknn_signature(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kcknn_signature(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'isample', '__input';'osig', '__output';'useall', 0;'ppoints', 10;'minpoints', 10;'npoints', 10};
maxval={0,0,0,99,2,2};
minval={0,0,0,1,2,2};
istoggle=[0,0,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile','Toggle','Integer','Integer','Integer'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'cknn_signature"  '],Inputs,narglist);
