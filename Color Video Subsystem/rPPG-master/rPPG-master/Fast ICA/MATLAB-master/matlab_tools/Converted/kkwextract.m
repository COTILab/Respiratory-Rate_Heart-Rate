%kkwextract ' '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kwextract.pane file
%
% Parameters: 
% InputFile: i 'Input Object', required: 'Input object to extraction subband from.'
% OutputFile: o 'Output Subband', required: 'Resulting output data object'
% Integer: el 'Elements ', default: 1: 'Number of layers in the elements direction.'
% Integer: hl 'Height ', default: 1: 'Number of layers in the height direction.'
% Integer: wl 'Width ', default: 1: 'Number of layers in the width direction.'
% Integer: dl 'Depth ', default: 1: 'Number of layers in the depth direction.'
% Integer: tl 'Time ', default: 1: 'Number of layers in the time direction.'
%
% Example: o = kkwextract(i, {'i','';'o','';'el',1;'hl',1;'wl',1;'dl',1;'tl',1})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kwextract - extraction of subbands from a wavelet object
%
%  DESCRIPTION
% 
% NOTE: The terms band and subband in this routine refers to Wavelet
% Analysis.
% The "Subband Extraction" operator (kwextract) extracts a subband of
% data from the source object "Input" (i) and places it in the
% destination object "Output" (o).  The subband is specified by the
% Width (w and wl), Height (h and hl) , Depth (d and dl), Time (t and
% tl), and Elements (e and el) Select Subband and Select Level
% parameters.  The combination of these two parameters (Subband Selection
% and Subband Level) will define the origin and the size of the extracted
% subband.  Basicaly, what "Subband Extraction" does is to get the
% total size of a selected dimension defined by the Select Subband
% parameter and divide this dimension  by two to the number defined by
% the related Subband Level parameter, the obtained number defines the
% size of the subband in that dimension.  If the Select Subband parameter 
% for a selected dimension is equal to "High" then the origin of the 
% subband in that dimension will be equal to the size of the subband in that 
% dimension, if the Select Subband  parameter for a selected dimension is 
% "Low" the subband origin in that dimension is set to 0.  The previous 
% process is repeated for each selected dimension.  The datum at this starting 
% point will be placed at the origin (0,0,0,0,0) in the destination object.
% 
% The output data object size for each dimension is determined simultaneously 
% by the Select Subband parameters "if" they are selected in combination 
% with the original source data size.  
% In other words, if no parameter is selected on the graphical user
% interface (or explicitly specified when running kwextract from the command
% line), all data on that dimension will be extracted.  This will ensure the 
% following behavior.  Given an input data file with dimensions (width=256, 
% height=256, depth=10, time=1, elements = 1), and the following 
% "specified" parameters:
% 	
% 	Subband Select:  Width = Low, Height = Low 
% 	Subband Level:  Width = 2, Height = 2
% 
% the output object size will be (width=64, height=64, depth=10, time=1,
% elements = 1).
% 
% The extract operation is based on implicit indexing.  This means that if
% location or time data exist, the extract operation is not done in terms
% an interpretation of the location/time data values, but in terms of the
% implicit indexing of these data (which is specified by the width, height,
% depth, time, elements indices of the polymorphic data model).  This program
% can operate on any combination of value, mask, location and/or time data
% in the input object.  Map data is unaffected by the extract operation.
% 
% The subobject position attribute of a data object defines the coordinates
% at which that subobject is located in its parent data object.
% The "Record Subband Origin" option (subpos) allows the extract operator to
% set the sub-object position attribute in the output object to the Region
% origin.  If this option is set to "Yes", the subobject position of the
% output object will be set to the position where the subband was 
% extracted from "Record Subband Origin" is set to "No", the output subobject 
% position is set to (0,0,0,0,0).  Programs like the insert operator (kwinsert 
% or kinsert) can use this attribute for automatically inserting the subregion 
% back into the original after processing.
% 
% The subobject position attribute can also be explicitly set by using the
% Set Data Attributes operator (ksetdattr), and can be printed using the
% Print File Information operator (kfileinfo).
% 
% The destination object data types are the same as the source object
% data types.
%
%  
%
%  EXAMPLES
% Subband extraction of the upper-left subband from the image_wlt object.
% kwextract -i image_wlt -o image_sub -w 0 -h 0 -wl 1 -hl 1
%
%  "SEE ALSO"
% kextract,kwinset,kinset
%
%  RESTRICTIONS 
% This program has not yet been updated to completely support the
% polymorphic data model. The program assumes that the data dimensions are
% power of two numbers.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc.  All rights reserved.
% 


function varargout = kkwextract(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkwextract(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'o', '__output';'el', 1;'hl', 1;'wl', 1;'dl', 1;'tl', 1};
maxval={0,0,2,2,2,2,2};
minval={0,0,2,2,2,2,2};
istoggle=[0,0,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile','Integer','Integer','Integer','Integer','Integer'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'kwextract"  '],Inputs,narglist);
