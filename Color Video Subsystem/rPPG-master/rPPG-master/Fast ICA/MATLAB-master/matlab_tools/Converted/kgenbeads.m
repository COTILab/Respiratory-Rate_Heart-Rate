%kgenbeads 'generates object in an elypsoid '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros genbeads.pane file
%
% Parameters: 
% InputFile: p 'Object to place', required: 'object to be placed several times into elypsoid. Has to be a SMALL psf or object !'
% InputFile: v 'Vector Input', optional: 'vector format : chromosome nr., segment nr, xpos,ypos,zpoz'
% Integer: startc 'Chromosome Nr.', default: 1: 'territory number to start with'
% Integer: starts 'Segment Nr.', default: 0: 'segment to start with'
% Toggle: allchrom 'take all chromosomes', default: 0: 'start at beginning and take the whole data in y-direction'
% Double: bX 'Relative Elysoid Bounds X', default: 0.8: 'relative to Image Border. Vector input will be mapped to (pos+1.0)*Bound*Size/2'
% Double: bY 'Y', default: 0.8: ' '
% Double: bZ 'Z', default: 0.8: ' '
% Integer: N '#Objects', default: 100: 'number of copies to be placed'
% Integer: sX 'SizeX', default: 64: 'size of output image'
% Integer: sY 'SizeY', default: 64: 'size of output image'
% Integer: sZ 'SizeZ', default: 64: 'size of output image'
% Integer: e 'Elements', default: 1: 'for views from different angles'
% Double: da 'delta angle', default: 45: 'angle between different views'
% Double: I 'Object Intensity', default: 10000: 'Intensity per simulated Object (# Photons)'
% Toggle: t 'Init randomizer from time', default: 0: 'initializes randomizer each time differently'
% OutputFile: o 'Output', required: 'Float Image of simulation'
% Toggle: uc 'Vector Output in Unit Coordinates', default: 0: 'vecotors are given in unit coordinates [-1 .. 1]'
% OutputFile: oi 'Vector Output', required: 'Float Vectors of simulated points'
%
% Example: [o, oi] = kgenbeads({p, v}, {'p','';'v','';'startc',1;'starts',0;'allchrom',0;'bX',0.8;'bY',0.8;'bZ',0.8;'N',100;'sX',64;'sY',64;'sZ',64;'e',1;'da',45;'I',10000;'t',0;'o','';'uc',0;'oi',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% genbeads - generates object in an elypsoid
%
%  DESCRIPTION
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996-2003, Rainer Heintzmann,  All rights reserved.
% 


function varargout = kgenbeads(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kgenbeads(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'p', '__input';'v', '__input';'startc', 1;'starts', 0;'allchrom', 0;'bX', 0.8;'bY', 0.8;'bZ', 0.8;'N', 100;'sX', 64;'sY', 64;'sZ', 64;'e', 1;'da', 45;'I', 10000;'t', 0;'o', '__output';'uc', 0;'oi', '__output'};
maxval={0,1,2,1,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0};
minval={0,1,2,1,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0};
istoggle=[0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Integer','Integer','Toggle','Double','Double','Double','Integer','Integer','Integer','Integer','Integer','Double','Double','Toggle','OutputFile','Toggle','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=2; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'genbeads"  -k'],Inputs,narglist);
