%kvcmtrans 'Linear Color Space Conversion with Specified 3x3 Matrix (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vcmtrans.pane file
%
% Parameters: 
% InputFile: i1 'Input Image ', required: 'input image'
% InputFile: i2 'Transformation Matrix ', required: 'input transformation matrix'
% Double: n 'Normalization Factor ', default: 255: 'specifies normalization factor'
% OutputFile: o 'Output Image ', required: 'output resulting image'
%
% Example: o = kvcmtrans({i1, i2}, {'i1','';'i2','';'n',255;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vcmtrans - Linear Color Space Conversion with Specified 3x3 Matrix  (K1)
%
%  DESCRIPTION
% .I vcmtrans
% will take a multi-spectral input image and output an image of color
% space model GENERIC by applying a user specified 
% color space conversion matrix.
% 
% The input image must be of data storage type FLOAT, and 
% contain three data bands. The color space model for the
% input image can be set to any type.
% The input image will be normalized by the value specified by 
% the -n option. The default is 255. 
% 
% The second input image specifies the transformation matrix. This image  must be
% of data storage type float and must be a 3x3 image. The format of this
% image must be:
% 
% .DS
%    { 11, 12, 13 }
%    { 21, 22, 23 }
%    { 31, 32, 33 }
% .DE
% 
% This image can be imported using kasc2val. It is important to
% remember that the input image will be normalized by the 
% normalization option. The default is 255.0. The conversion
% is performed as follows:
% - Band 1 of the input image is updated by:
% pixel = matrix[0][0]*(t1) + matrix[0][1]*(t2) + matrix[0][2]*(t3)
% - Band 2 of the input image is updated by:
% pixel = matrix[1][0]*(t1) + matrix[1][1]*(t2) + matrix[1][2]*(t3)
% - Band 3 of the input image is updated by:
% 
% pixel = matrix[2][0]*(t1) + matrix[2][1]*(t2) + matrix[2][2]*(t3)
% 
% 	
% 		
% 		where t1 = pixel from band 1
% 		where t2 = pixel from band 2
% 		where t3 = pixel from band 3
% 	
% 
% 
% When converting between the different color spaces,
% care must be taken in regards to the normalization 
% factor. If the image had been scaled by using 
% kscale, then the scale factor used in kscale
% should be the normalization factor used in this
% routine.  The resulting image should not be normalized by using knormal,
% if the inverse transformation is desired. The data will be corrupted.
% NOTE: The output values of some of the transformations will be negative, and
% some values will be greater than 1. If conversion to BYTE is desired, then
% a possible solution is:
% 
%  1.
% use vbandspt3 to obtain 3 grey level images
% 
%  2.
% use kadd to offset the image by the maximum negative value.
% The offset value will most likely be different for each of
% the three images.
% 
%  3.
% use kstats to get the maximum pixel value in the image and
% divide that by the maximum desired pixel value. This gives the
% scale factor. (EX. 3.2/255 = scale factor).
% 
%  4.
% now use kconvert to scale (NOT NORMALIZE) by the computed
% scale factor and convert to BYTE.
% 
%  5.
% kinset can be used to create a multi-spectral image.
% 
% The reverse of the steps above may be followed to obtain
% the original image (scale by the inverse of the scale factor).
% 
% We really do not know what it means to manipulate this data
% as explained above, except to make it displayable?
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% The input image must be of data storage type FLOAT.
% The user specified matrix image must have a data
% storage type for float.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvcmtrans(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvcmtrans(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i1', '__input';'i2', '__input';'n', 255;'o', '__output'};
maxval={0,0,2,0};
minval={0,0,2,0};
istoggle=[0,0,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Double','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vcmtrans"  '],Inputs,narglist);
