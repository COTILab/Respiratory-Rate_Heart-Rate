%kThreshold 'Threshold Object Menuform'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros Threshold.pane file
%
% Parameters: 
% MultiChoice: thresholdPolicy ' ', default: 1: 'Flag toggle selection'
%    Choices are:
%   1: 'Pixel Clipping'
%   2: 'Pixel Thresholding'
%   3: 'Window Contrast Enhancement'
% Integer: thresholdClipPixelVal '(clipped pixel value) ', default: 0: 'pixel value for masked region'
% Integer: thresholdPixelVal '(threshold pixel value) ', default: 0: 'pixel value for non-masked region'
%
% Example: kThreshold( {'thresholdPolicy',1;'thresholdClipPixelVal',0;'thresholdPixelVal',0})
%
% Khoros helpfile follows below:
% .begin tagged
% 
% .item "The Threshold Visual Object"
% A threshold visual object provides a mechanism with which you may perform 
% various types of thresholding on an image.  The threshold visual object
% has three "policies", which dictate the type of thresholding operation which
% is used: Pixel Clipping, Pixel Thresholding, and Window Contrast Enhancement.  
% For all three types of thresholding operations, the "Lower", "Upper", and 
% "Range" scrollbars are used to interactively specify the range of pixel values
% on which to perform the thresholding operation.
% 
% .item "Pixel Clipping"
% Pixel clipping is used to mask out certain parts of the image
% so that only a desired range of pixels is observed.  Pixel
% clipping only allows a specified region of the original pixel
% values to be displayed; all values outside the specified region
% will be set to a predetermined pixel value.  Use the "Lower",
% "Upper" and "Range" scrollbars to interactively specify the region 
% of pixel values that will retain their original values. 
% .begin tagged
% .item "(clipped pixel value)"
% Used only when the threshold object is doing "Pixel Clipping",
% this is the pixel value used in the clipped, or masked-out,
% regions of the image.  All pixels inside the specified range
% will appear in their original pixel values.  The opposite
% happens when the "Invert Region?" logical is set to TRUE (ie, the 
% pixel value is used for the pixels inside the range, while all pixels 
% outside the range appear in their original pixel values).
% .end tagged
% 
% .item "Pixel Thresholding"
% Pixel thresholding is used to set all values in the image to
% one of two values; all values inside the specified range will
% be displayed in white, while all values outside the range will 
% be displayed in black.  Use the "Lower", "Upper" and "Range" 
% scrollbars to interactively specify the region of pixel values 
% that appear in white.
% .begin tagged
% .item "(threshold pixel value)"
% Used only when the threshold object is doing "Pixel Thresholding",
% this is the pixel value assigned to all the pixels
% within the range defined by the scroll bars of the threshold
% object. All pixels outside the specified range will appear
% black.  The opposite happens when the "Invert Region?" logical
% is set to TRUE (ie, the pixel value is used for the pixels outside the range, 
% while all pixels inside the range are black).
% .end tagged
% 
% .item "Window Contrast Enhancement"
% Windowed thresholding is used to increase the contrast of
% the image in a particular pixel range, while masking out
% the other pixels in the image. Use the "Lower", "Upper" and "Range" 
% scrollbars to interactively specify the region of pixel values that 
% will have their contrast enhanced; all pixels outside the range will 
% appear in black.  The pixel values inside the specified range will have 
% their pixel values normalized to cover the entire range of pixels in the image;
% thus, this operation can be thought of as a histogram stretch.
% 
% .item "Invert Region?"
% When this logical is set to "False" (the default)
% the pixel thresholding, pixel clipping, and windowed thresholding operations 
% will work normally.  When this logical is set to "True", 
% the pixel thresholding, pixel clipping, and windowed thresholding operations 
% are inverted;  that is, they will have the opposite effect from what they 
% do normally.  For pixel thresholding, the values outside the range (rather 
% than inside) will be displayed in the pixel value specified; for pixel 
% clipping, the values outside the range (rather than inside) will appear in 
% their original values; for windowed thresholding, the values outside the 
% range (rather than inside) will have their values normalized.
% 
% .item "Show Palette?"
% Usually, the threshold object displays a palette of the pixel values above
% the "Upper", "Lower", and "Range" scrollbars.  The palette is, however,
% optional.  Setting "Show Palette?" to False will make the palette go away.
% 
% .item "Reset"
% This button resets the lower and upper values of the threshold range to the 
% minimum and maximum values of the image being displayed.  This has the effect 
% of undoing any prior thresholding operations, and setting the image back
% to its "un-thresholded" state. 
% 
% .end tagged


function varargout = kThreshold(varargin)
Inputs={};
if nargin ==0
  arglist={'',''};
elseif nargin ==1
  arglist=varargin{1};
else error('Usage: [out1,..] = kThreshold(arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'thresholdPolicy', 1;'thresholdClipPixelVal', 0;'thresholdPixelVal', 0};
maxval={0,1,1};
minval={0,1,1};
istoggle=[0,0,0];
was_set=istoggle * 0;
paramtype={'MultiChoice','Integer','Integer'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'Threshold" '],Inputs,narglist);
