%kMaxProjDist 'Projects and generates a map of dx,dy,distance,max-position to the neares nominal spot position '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros MaxProjDist.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'First Input data object'
% MultiChoice: method 'Projection Method', default: 1: 'defines the method to use for the projection (along z)'
%    Choices are:
%   1: 'Sum'
%   2: 'Average'
%   3: 'Max'
%   4: 'Max-Min'
%   5: 'Max+Min-2Avg'
%   6: 'confocal max'
%   7: 'confocal Gauss'
%   8: 'confocal Reassigned'
%   9: 'Quadrature'
%   10: 'scaled subtraction (Gauss illumination, fixed beta)'
%   11: 'scaled subtraction (Gauss illumination, variable beta)'
% Double: spdistXx 'Spot Dist X x', default: 10: 'vector for X spot distance in pixels'
% Double: spdistXy 'y', default: 0: 'vector for X spot distance in pixels'
% Double: spdistYx 'Spot Dist Y x', default: 0: 'vector for Y spot distances in pixels every "stepsX" steps'
% Double: spdistYy 'y', default: 10: 'vector for Y spot distances in pixels'
% Double: pos0x 'ZeroPosition x', default: 0: 'Zero position of the spot pattern'
% Double: pos0y 'y', default: 0: 'Zero position of the spot pattern'
% Integer: stepsx 'steps X', default: 5: 'number of steps in X direction'
% Integer: stepsy 'steps Y', default: 5: 'number of steps in Y direction'
% Double: spotsize 'Spotsize', default: 1: 'size of the confocal pinhole (Gaussian shape)'
% Double: refac 'Reassign Position', default: -0.5: 'Relative factor to reassign a pixel towards the nominal position of the nearest illumination focus.'
% OutputFile: o1 'Confocal Output', required: 'ResultingProjection according to the selected method'
% OutputFile: o2 'Distance File', required: 'Resulting Distance file [dx,dy, distance, z-positon) of maximum to nearest spot'
% OutputFile: o3 'Gauss Confocal (on move grid)', optional: 'This output in on a grid corresponding to the moving spots'
%
% Example: [o1, o2, o3] = kMaxProjDist(i, {'i','';'method',1;'spdistXx',10;'spdistXy',0;'spdistYx',0;'spdistYy',10;'pos0x',0;'pos0y',0;'stepsx',5;'stepsy',5;'spotsize',1;'refac',-0.5;'o1','';'o2','';'o3',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% MaxProjDist - Projects and generates a map of dx,dy,distance,max-position to the neares nominal spot position
%
%  DESCRIPTION
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996-2003, Rainer Heintzmann,  All rights reserved.
% 


function varargout = kMaxProjDist(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kMaxProjDist(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'method', 1;'spdistXx', 10;'spdistXy', 0;'spdistYx', 0;'spdistYy', 10;'pos0x', 0;'pos0y', 0;'stepsx', 5;'stepsy', 5;'spotsize', 1;'refac', -0.5;'o1', '__output';'o2', '__output';'o3', '__output'};
maxval={0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
minval={0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
istoggle=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1];
was_set=istoggle * 0;
paramtype={'InputFile','MultiChoice','Double','Double','Double','Double','Double','Double','Integer','Integer','Double','Double','OutputFile','OutputFile','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=2; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'maxprojdist"  -k'],Inputs,narglist);
