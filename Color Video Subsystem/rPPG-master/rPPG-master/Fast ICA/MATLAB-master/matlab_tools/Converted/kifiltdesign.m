%kifiltdesign 'General 2-D image filter design'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros ifiltdesign.pane file
%
% Parameters: 
% Integer: wsize 'Image width ', default: 256: 'Image width size (pixels)'
% Integer: hsize 'Image height ', default: 256: 'Image height (pixels)'
% Integer: order 'Filter order ', default: 1: 'Filter order (related to steepness of cutoff and amount of attenuation)'
% OutputFile: o 'Output image ', required: 'Output image'
% Toggle: lp 'Low pass (requires UC)', default: 0: 'Low pass (requires upper cutoff)'
% Toggle: hp 'High pass (requires LC)', default: 0: 'High pass (requires lower cutoff)'
% Toggle: bp 'Band pass (requires LC and UC)', default: 0: 'Band pass (requires lower and upper cutoff)'
% Toggle: bs 'Band stop (requires LC and UC)', default: 0: 'Band stop (requires lower and upper cutoff)'
% Toggle: ideal 'Ideal', default: 0: 'Ideal'
% Toggle: but 'Butterworth', default: 0: 'Butterworth'
% Toggle: gauss 'Gaussian', default: 0: 'Gaussian'
% Toggle: ch1 'Chebyshev I', default: 0: 'Chebyshev1'
% Toggle: ch2 'Chebyshev II', default: 0: 'Chebyshev2'
%
% Example: o = kifiltdesign( {'wsize',256;'hsize',256;'order',1;'o','';'lp',0;'hp',0;'bp',0;'bs',0;'ideal',0;'but',0;'gauss',0;'ch1',0;'ch2',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% ifiltdesign - General 2-D image filter design
%
%  DESCRIPTION
% This routine generates a spatial frequency image of real values
% (zero phase) that represent the magnitude response of the
% requested filter type and brand.  The filter types
% are are: lowpass, highpass, bandpass, and bandstop. The
% function brands are: ideal, Butterworth, Gaussian, Chebyshev I,
% and Chebyshev II.
% 
% The output is symmetric across a diameter thru the origin
% of the image; the origin can be either the center of the image
% or the top left corner of the image.  Cutoff frequencies are
% normalized to the Nyquist frequency, thus implying that 0
% corresponds to DC and 1.0 corresponds to the Nyquist frequency.
% 
% Note that the number of pixels between DC and Nyquist is
% given by the image_width/2 in the width direction and
% image_height/2 in the height direction. This means that if
% you ask for a non-square image you will get a non-circularly
% symmetric passband in the output. This occurs because
% it is assumed that the frequency sampling interval is the same
% in both directions.
% 
% For the ideal filter, the magnitude response is 1.0 in the passband, 1.0
% at the cutoff frequency, and zero in the stopband.
% 
% For the Butterworth filter (also called a maximally-flat filter), the
% magnitude response in the passband grades from 1.0 down to 1/sqrt(2) at
% the cutoff frequence. The response in the stopband falls from 1/sqrt(2) towards
% zero at a rate that increases with the order of the filter.
% This filter is described in Oppenheim and Schafer, p.845, Eq. B.1.
% 
% For the Gaussian filter (actually a super-Gaussian), the passband response 
% grades from 1.0 down to 1/sqrt(2) at the cutoff frequency. 
% The response in the stopband falls from 1/sqrt(2) towards
% zero at a rate that increases with the order of the filter.
% This is an ad-hoc filter that has nice behavior and is easy to understand.
% 
% The Chebyshev type I filter is an equiripple filter that places the ripple
% in the passband. In the passband, the response oscillates between 1.0 and
% 1/sqrt(1+epsilon^2), where epsilon controls the ripple . At the cutoff
% frequency, the magnitude response is exactly 1/sqrt(1+epsilon^2). The
% response in the stopband falls from that level towards zero at a rate
% that increases with the order of the filter. One way to set the parameters
% for this filter is to set epsilon to obtain the desired ripple behavior and
% then set the order to obtain the desired attenuation in the stopband.
% This filter is described in Oppenheim and Schafer, p.847, Eq. B.4.
% 
% The Chebyshev type II filter is an equiripple filter that places the ripple
% in the stopband. In the stopband, the response oscillates between 0.0 and
% 1/sqrt(1+(1/epsilon^2)), where epsilon controls the ripple . At the cutoff
% frequency, the magnitude response is exactly 1/sqrt(1+(1/epsilon^2)). The
% response in the passband falls from 1.0 towards that level at a rate
% that depends on the order of the filter. One way to set the parameters
% for this filter is to set epsilon to obtain the desired ripple behavior and
% then set the order to obtain the desired behavior in the passband.
% This filter is described in Oppenheim and Schafer, p.848, Eq. B.10.
%
%  
%
%  EXAMPLES
% ifiltdesign -o outputlt -lp -but -order 4 -ucutoff 0.1 -wsize 512 -hsize 512
% 
% This command will generate a 512 x 512 image of doubles values with a range
% from 0 to 1 that corresponds to the frequency image that results from a
% normalized cutoff of 0.1 and a fourth order Butterworth transfer function.  
% The DC value is centered at 256, 256 in the image.
% 
% This image can then be multiplied with the frequency domain representation
% of the image to be filtered, thus performing the filtering operation (in
% the frequency domain).
% 
% The following shows how one might apply the above filter to the "ball" image:
% % kfft -i image:ball -o ball.fft -dir 0 -center 1 -scale 1
% % kmul -i1 ball.fft -i2 outputlt -o ball.lp.fft
% % kfft -i ball.lp.fft -o ball.lp -dir 1 -center 1 -scale 2
% % kcmplx2real -i ball.lp -or ball.lp
% 
% The lowpass filtered output, ball.lp, can then be displayed directly using 
% putimage.
%
%  "SEE ALSO"
% kfft, kmul, lifiltdesign, kimage_proc
%
%  RESTRICTIONS 
% These filters generate only the magnitude response. While this is useful for
% filtering operations, the zero phase behavior may not be appropriate for
% other applications.
%
%  REFERENCES 
% 
% Alan V. Oppenheim and Ronald W. Schafer, "Discrete-Time Signal Processing",
% ISBN 0-13-216292-X, Prentice-Hall, 1989.
% 
% Edward P. Cunningham,"Digital Filtering: An Introduction", ISBN 0-395-53989-7, 
% Houghton Mifflin, 1992.
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kifiltdesign(varargin)
Inputs={};
if nargin ==0
  arglist={'',''};
elseif nargin ==1
  arglist=varargin{1};
else error('Usage: [out1,..] = kifiltdesign(arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'wsize', 256;'hsize', 256;'order', 1;'o', '__output';'lp', 0;'hp', 0;'bp', 0;'bs', 0;'ideal', 0;'but', 0;'gauss', 0;'ch1', 0;'ch2', 0};
maxval={2,2,2,0,0,0,0,0,0,0,0,0,0};
minval={2,2,2,0,0,0,0,0,0,0,0,0,0};
istoggle=[1,1,1,0,1,1,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'Integer','Integer','Integer','OutputFile','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'ifiltdesign"  '],Inputs,narglist);
