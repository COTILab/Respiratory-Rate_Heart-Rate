%kvbandsp3 'Extract 3 Bands from a Multiband Image (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vbandsp3.pane file
%
% Parameters: 
% InputFile: i 'Input Image ', required: 'input image filename'
% Integer: b 'Starting Data Band Number', default: 0: 'Data band number to extract'
% OutputFile: o1 'Output Image 1', optional: 'output image filename'
% OutputFile: o2 'Output Image 2', optional: 'output image filename'
% OutputFile: o3 'Output Image 3', optional: 'output image filename'
%
% Example: [o1, o2, o3] = kvbandsp3(i, {'i','';'b',0;'o1','';'o2','';'o3',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vbandsp3 - Extract 3 Bands from a Multiband Image  (K1)
%
%  DESCRIPTION
% "vbandsp3"
% extracts 3 bands from an image and creates
% new images containing only one band. 
% The 3 bands extracted start with the band number 
% Specified by the starting band number option. The band numbering scheme 
% starts at zero.
% 
% The map is carried along with the new image, the map scheme
% will become ONEPERBAND regardless of the input image's map
% scheme.  The comment field of the new image will read the same as the
% comment field of the input image, except it is append with the band 
% number and the filename from which the band was taken.
% 
% The output files are optional arguments, if all or any output
% files names are not specified, vbandsp3 will use the input 
% filename with a suffix appended to it as the output filenames.
% The suffixes are determined by the color space model:
% 
%  "NONE or GENERIC:" 8
% input_filename.1
% input_filename.2
% input_filename.3
% 
%  "ntscRGB or genericRGB or cieRGB:" 8
% input_filename.R
% input_filename.G
% input_filename.B
% 
%  "ntscYIQ:" 8
% input_filename.Y
% input_filename.I
% input_filename.Q
% 
%  "ntscCMY:" 8
% input_filename.C
% input_filename.M
% input_filename.Y
% 
%  "HLS:" 8
% input_filename.H
% input_filename.L
% input_filename.S
% 
%  "HSV:" 8
% input_filename.H
% input_filename.S
% input_filename.V
% 
%  "IHS:" 8
% input_filename.I
% input_filename.H
% input_filename.S
% 
%  "cieUVW or cieucsUVW:" 8
% input_filename.U
% input_filename.V
% input_filename.W
% 
%  "cieucsSOW:" 8
% input_filename.S
% input_filename.O
% input_filename.W
% 
%  "cieucsLab:" 8
% input_filename.L
% input_filename.a
% input_filename.b
% 
%  "cieucsLuv:" 8
% input_filename.L
% input_filename.u
% input_filename.v
% 
% The -b option determines which data band to extract. The default is 1.
%
%  
%
%  EXAMPLES
% vbandsp3 -i test
% 
% The file test must contain at least 3 data bands, and if it had
% a color space model = HLS, the output files would be: test.H, test.L,
% and test.S. If it had no color space model, the output files
% would be: test.1, test.2 and test.3. In this case bands 0, 1, and 2
% would be extracted.
% vbandsp3 -i test -o1 bee -o2 junk -o3 yy -b 3
% 
% The image "bee" would be band number 3, "junk" would be band number 4
% and "yy" would be band number 5. Thus, the image must contain 
% at least 5 data bands.
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvbandsp3(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvbandsp3(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'b', 0;'o1', '__output';'o2', '__output';'o3', '__output'};
maxval={0,1,1,1,1};
minval={0,1,1,1,1};
istoggle=[0,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','OutputFile','OutputFile','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vbandsp3"  '],Inputs,narglist);
