%kkatext 'Add a text annotation object to a kobject '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros katext.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'First Input data object'
% String: x 'X Position', default: '0': 'will draw from this column on'
% String: y 'Y Position', default: '0': 'will draw from this row on'
% String: d 'Depth Position', default: '*': 'depth coordinate of string placement'
% String: t 'Time Position', default: '*': 'time coordinate of string placement'
% String: string 'String', default: ' ': 'string to be drawed'
% Toggle: italic 'Italic', default: 0: 'if set will use italic font'
% Toggle: bold 'Bold', default: 0: 'if set will use bold font'
% Toggle: underline 'Underlined', default: 0: 'if set will use underlined font'
% Integer: charspace 'Char', default: 0: 'additional pixels for intracharacter spacing'
% Integer: linespace 'Line', default: 0: 'additional pixels for intraline spacing'
% Integer: opacity 'Opacity', default: 100: 'Opacity for the text'
% OutputFile: o 'Output', required: 'Resulting output data object'
%
% Example: o = kkatext(i, {'i','';'x','0';'y','0';'d','*';'t','*';'string',' ';'italic',0;'bold',0;'underline',0;'charspace',0;'linespace',0;'opacity',100;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% katext - Add a text annotation object to a kobject
%
%  DESCRIPTION
% This operator adds a text annotation object to a kobject (specified with the [-i] parameter), saving the object with the new annotation in the file specified with the [-o] parameter. All embedded objects in the input object will be copied to the output object, which data will not be modified until it is passed through the karender kroutine.
% The position of the text object is specified with the [-x] (start column) and [-y] (start row) in pixel coordinates. The text will appear only on the frames specified with the [-t] and [-d] parameters. The text string to be added is specified with the [-string] parameter, and its color and opacity are specified with the [-color] and [-opacity] parameters.
% Other parameters that control text appearance are: [-fontface] and [-fontsize] are indexes for the supported fonts and sizes. If [-italic], [-bold] or [-underline] are specified, the text will be italicized, bold or underlined. The parameters [-charspace] and [-linespace] specifies additional spaces between the characters and lines. The parameter [-halignment] controls the horizontal alignment of the text. The parameters [-direction] and [-orientation] determine how the text will be directed and orientated.
%
%  
%
%  EXAMPLES
% All examples for the Annotate toolbox are listed on the $ANNOTATE/manual/index.html on-line manual.
%
%  "SEE ALSO"
% karender, kman page for ka_color_decodecolor and on-line manual for information on the color specification schemes, kman page for ka_decode_coord and ka_decode_frame_coord or the on-line manual for information on the coordinate specification schemes.
%
%  RESTRICTIONS 
%
%  REFERENCES 
% All references for the Annotate toolbox are listed on the $ANNOTATE/manual/index.html on-line manual.
%
%  COPYRIGHT
% Annotate Toolbox v1.0 Copyright (C) 1997, Rafael Santos.
% 


function varargout = kkatext(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkatext(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'x', '0';'y', '0';'d', '*';'t', '*';'string', ' ';'italic', 0;'bold', 0;'underline', 0;'charspace', 0;'linespace', 0;'opacity', 100;'o', '__output'};
maxval={0,0,0,0,0,0,0,0,0,100,100,100,0};
minval={0,0,0,0,0,0,0,0,0,-50,-50,0,0};
istoggle=[0,0,0,1,1,0,1,1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','String','String','String','String','String','Toggle','Toggle','Toggle','Integer','Integer','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'katext"  '],Inputs,narglist);
