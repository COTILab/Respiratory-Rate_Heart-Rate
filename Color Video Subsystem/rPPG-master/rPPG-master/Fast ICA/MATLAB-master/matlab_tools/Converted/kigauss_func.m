%kigauss_func 'Generate Gaussian Function Image'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros igauss_func.pane file
%
% Parameters: 
% Integer: wsize 'Width of Output (Number of Columns) ', default: 512: 'Width of output image (number of columns)'
% Integer: hsize 'Height of Output (Number of Rows) ', default: 512: 'Height of output image (number of rows)'
% OutputFile: o 'Output', required: 'Output file containing Gaussian data'
% Integer: wpeak 'Peak Location along Width (X) ', default: 256: 'Width coordinate for peak of 2D Gaussian function'
% Integer: hpeak 'Peak Location along Height (Y) ', default: 256: 'Height coordinate for peak of 2D Gaussian function'
% InputFile: i 'Parameter File', optional: 'Input file of parameters for multiple Gaussian functions'
%
% Example: o = kigauss_func(i, {'wsize',512;'hsize',512;'o','';'wpeak',256;'hpeak',256;'i',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% igauss_func - Generate Gaussian Function Image
%
%  DESCRIPTION
% 
% "igauss_func" generates an image containing one or more 2-dimensional 
% Gaussian functions. The image has dimensions of wsize*hsize and can have 
% one of the 
% following types,\fBbit, byte, unsigned byte, short, unsigned short, integer, 
% unsigned integer, long, unsigned long, float" and \fBdouble\fP.
% The parameters for the Gaussian function can be
% specified directly if only one Gaussian is desired; if multiple Gaussians are 
% desired, then the parameters are specified as a multiband (E=6) image. 
% Six parameters need to be specified for each Gaussian function to be 
% generated. These are in order: x 
% and y coordinate of the peak of the function, variance along x and 
% y direction, correlation coefficient, and the amplitude of the Gaussian 
% function.
% 
% The correlation coefficient can range between -1 and 1. It represents the degree
% of correlation between the Gaussian functions along the 2 dimensions. A value of
% 1 implies perfect correlation whereas a value of 0 implies that the two 
% variables are independent of each other.
% 
% For the multiple Gaussian case, the data vector of the parameter image must 
% contain 6 elements (E dimension must be 6) denoting the parameters for the 
% 2D Gaussian function, in the order indicated above. 
% 
% If the normalization flag is set, the amplitude value for the Gaussian 
% function is ignored.
% 
% If the parameter image contains a map segment, then the data is mapped 
% through that segment before being read for supplying parameters. An error
% occurs if the parameter image contains a mask segment or if the parameter
% image does not have 6 bands of data.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kigauss_func(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kigauss_func(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'wsize', 512;'hsize', 512;'o', '__output';'wpeak', 256;'hpeak', 256;'i', '__input'};
maxval={2,2,0,0,0,1};
minval={2,2,0,0,0,1};
istoggle=[1,1,0,1,1,1];
was_set=istoggle * 0;
paramtype={'Integer','Integer','OutputFile','Integer','Integer','InputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'igauss_func"  '],Inputs,narglist);
