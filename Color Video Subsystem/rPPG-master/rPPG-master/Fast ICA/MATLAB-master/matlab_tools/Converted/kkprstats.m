%kkprstats 'Print statistics to Cantata variables'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kprstats.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'First Input data object'
% String: wmin_var ' ', default: 'width_min': 'Name of minimum width variable'
% String: wmax_var ' ', default: 'width_max': 'Name of maximum width variable'
% String: hmin_var ' ', default: 'height_min': 'Name of minimum height variable'
% String: hmaxvar ' ', default: 'height_max': 'Name of maximum height variable'
% String: dmin_var ' ', default: 'depth_min': 'Name of minimum depth variable'
% String: dmax_var ' ', default: 'depth_max': 'Name of maximum depth variable'
% String: tmin_var ' ', default: 'time_min': 'Name of minimum time variable'
% String: tmax_var ' ', default: 'time_max': 'Name of maximum time variable'
% String: emin_var ' ', default: 'elem_min': 'Name of minimum element variable'
% String: emax_var ' ', default: 'elem_max': 'Name of maximum element variable'
% String: minval_var ' ', default: 'val_min': 'Name of minimum value variable'
% String: maxval_var ' ', default: 'val_max': 'Name of maximum value variable'
% String: mean_var ' ', default: 'mean': 'Name for mean variable'
% String: wsize_var ' ', default: 'width_size': 'Name of total width variable (KSTATS_WSIZE)'
% String: var_var ' ', default: 'variance': 'Name for variance variable'
% String: hsize_var ' ', default: 'height_size': 'Name of total height variable (KSTATS_HSIZE)'
% String: sd_var ' ', default: 'std_dev': 'Name for standard deviation variable'
% String: dsize_var ' ', default: 'depth_size': 'Name of total depth variable'
% String: rms_var ' ', default: 'rms': 'Name for rms variable'
% String: tsize_var ' ', default: 'time_size': 'Name of total time variable'
% String: psum_var ' ', default: 'psum': 'Name of positive sum variable'
% String: esize_var ' ', default: 'elem_size': 'Name of total element variable'
% String: nsum_var ' ', default: 'nsum': 'Name for negative sum variable'
% String: sum_var ' ', default: 'sum': 'Name for sum variable'
% String: skew_var ' ', default: 'skew': 'Name for skew variable'
% String: kur_var ' ', default: 'kurtosis': 'Name for kurtosis variable'
% String: pts_var ' ', default: 'total_pts': 'Name for total points variable'
% String: ppts_var ' ', default: 'pos_pts': 'Name for positive points variable'
% String: npts_var ' ', default: 'neg_pts': 'Name for negative points variable'
% String: zpts_var ' ', default: 'zero_pts': 'Name for zero-valued points variable'
%
% Example: kkprstats(i, {'i','';'wmin_var','width_min';'wmax_var','width_max';'hmin_var','height_min';'hmaxvar','height_max';'dmin_var','depth_min';'dmax_var','depth_max';'tmin_var','time_min';'tmax_var','time_max';'emin_var','elem_min';'emax_var','elem_max';'minval_var','val_min';'maxval_var','val_max';'mean_var','mean';'wsize_var','width_size';'var_var','variance';'hsize_var','height_size';'sd_var','std_dev';'dsize_var','depth_size';'rms_var','rms';'tsize_var','time_size';'psum_var','psum';'esize_var','elem_size';'nsum_var','nsum';'sum_var','sum';'skew_var','skew';'kur_var','kurtosis';'pts_var','total_pts';'ppts_var','pos_pts';'npts_var','neg_pts';'zpts_var','zero_pts'})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kprstats - Print statistics to Cantata variables
%
%  DESCRIPTION
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kkprstats(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkprstats(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'wmin_var', 'width_min';'wmax_var', 'width_max';'hmin_var', 'height_min';'hmaxvar', 'height_max';'dmin_var', 'depth_min';'dmax_var', 'depth_max';'tmin_var', 'time_min';'tmax_var', 'time_max';'emin_var', 'elem_min';'emax_var', 'elem_max';'minval_var', 'val_min';'maxval_var', 'val_max';'mean_var', 'mean';'wsize_var', 'width_size';'var_var', 'variance';'hsize_var', 'height_size';'sd_var', 'std_dev';'dsize_var', 'depth_size';'rms_var', 'rms';'tsize_var', 'time_size';'psum_var', 'psum';'esize_var', 'elem_size';'nsum_var', 'nsum';'sum_var', 'sum';'skew_var', 'skew';'kur_var', 'kurtosis';'pts_var', 'total_pts';'ppts_var', 'pos_pts';'npts_var', 'neg_pts';'zpts_var', 'zero_pts'};
maxval={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
minval={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
istoggle=[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String','String'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'kprstats"  '],Inputs,narglist);
