%kkflip 'Reflect Data Along Specified Axes'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kflip.pane file
%
% Parameters: 
% InputFile: i 'Input Image', required: 'Source (input) object'
% OutputFile: o 'Output Image', required: 'Destination (output) object'
% Toggle: w 'Width', default: 0: 'reflection in the WIDTH direction'
% Toggle: h 'Height', default: 0: 'reflection in the HEIGHT direction'
% Toggle: d 'Depth', default: 0: 'reflection in the DEPTH direction'
% Toggle: t 'Time', default: 0: 'reflection in the TIME direction '
% Toggle: e 'Elements', default: 0: 'reflection in the ELEMENTS direction'
%
% Example: o = kkflip(i, {'i','';'o','';'w',0;'h',0;'d',0;'t',0;'e',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kflip - Reflect Data Along Specified Axes
%
%  DESCRIPTION
% .I kflip
% performs the reflection of data values and the validity mask.  The 
% directions supported by 
% .I kflip
% are: 1) width, 2) height, 3) depth, 4) time, and 5) elements.  The user
% is able to select one axis, all axes, or any combination for reflecting
% the data in an object.
% 
% If the source object has explicit time or location data, the data is
% transferred to the destination object but is
% .I NOT flipped.
% Note that location data can be reflected using
% .I klocxform.
% 
% If the source object contains MAP data it will be directly transferred
% to the destination object.
% 
% If the source object has the attribute KPDS_KERNEL_ORIGIN set to specify
% a "hot spot" in the data set, then the kernel origin is flipped along the
% same specified axes.
%
%  
%
%  EXAMPLES
% .begin code
% % kflip -i source_obj -o dest_obj -w
% .end code
% performs reflection of internal parameters about the width axis.
% .begin code
% % kflip -i source_obj -o dest_obj -w -h -d -t -e
% .end code
% performs reflection of parameters about all axes.
%
%  "SEE ALSO"
% klocxform(1)
%
%  RESTRICTIONS 
% .I kflip
% performs the reflection of parameters in the VALUE and MASK data segments.
% If LOCATION and TIME segments exist, the reflection is performed in the
% VALUE and MASK segments at this time. LOCATION and TIME are transferred 
% directly.  To reflect LOCATION data, see 
% .I klocxform.
%
%  REFERENCES 
% 1) FUNDAMENTALS OF IMAGE PROCESSING by A. K. Jain, Prentice Hall, 1989.
% 2) DIGITAL IMAGE PROCESSING by Rafael C. Gonzalez and Richard E. Woods,
% Addison Wesley, 1992.
% 3) DIGITAL IMAGE PROCESSING, 2nd. Ed., by William K. Pratt, Wiley, 1991.
% 4) MULTIDIMENSIONAL DIGITAL SIGNAL PROCESSING, by Dan E. Dudgeon and 
% Russell M. Mersereau, Prentice Hall, 1984.
% 5) DISCRETE-TIME SIGNAL PROCESSING, by Alan V. Oppenheim and Ronald W.
% Schafer, Prentice Hall, 1989.
% 6) TWO-DIMENSIONAL SIGNAL AND IMAGE PROCESSING, by Jae S. Lim, Prentice Hall,
% 1990.
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kkflip(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkflip(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'o', '__output';'w', 0;'h', 0;'d', 0;'t', 0;'e', 0};
maxval={0,0,0,0,0,0,0};
minval={0,0,0,0,0,0,0};
istoggle=[0,0,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile','Toggle','Toggle','Toggle','Toggle','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'kflip"  '],Inputs,narglist);
