%kkheq 'Perform Histogram Equalization'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kheq.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'Input data object'
% Toggle: invert 'Invert grey levels after processing', default: 0: 'invert grey levels after processing'
% OutputFile: o 'Output', required: 'Resulting output data object'
% Toggle: whole 'Whole dataset', default: 0: 'process whole data set at one time'
% Toggle: w 'Width', default: 0: 'include width in processing unit'
% Toggle: h 'Heigth', default: 0: 'include height in processing unit'
% Toggle: d 'Depth', default: 0: 'include depth in processing unit'
% Toggle: t 'Time', default: 0: 'include time in processing unit'
% Toggle: e 'Elements', default: 0: 'include elements in processing unit'
%
% Example: o = kkheq(i, {'i','';'invert',0;'o','';'whole',0;'w',0;'h',0;'d',0;'t',0;'e',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kheq - Perform Histogram Equalization
%
%  DESCRIPTION
% The "Equalize Histogram" operator (kheq)
% is used to perform histogram equalization on the Input object (i).
% The idea is to spread out the histogram values to fully occupy
% the range of the data type to enhance detail that would be otherwise lost.
% The grey levels in the data can be optionally inverted after histogram
% processing (this is often helpful for astronomical data).
% 
% Histogram equalization employs a nonlinear mapping of input values to output
% values. The nonlinear mapping is a scaled integral of the histogram
% of the input data. Equalization can make the data look visually
% harsh, but can bring out amazing detail in poor contrast data. 
% Histogram equalization is described in detail in texts on image processing.
% 
% If a mask is present with the input object, data points that are masked
% off are ignored in the histogramming. The mask is propagated to the
% output object.
% 
% If a map is present with the input object, all data will be pulled through
% the mask before histogramming. The output object will have no map.
% 
% For signed data types, the output will span the whole range of the data type,
% just as for the unsigned data types. Note that for signed types, this will
% include the negative part of the range. If this behavior is not desired, the
% data should be converted to unsigned prior to the application of the
% histogram equalization.
% 
% The data types that can be handled are currently limited to signed and
% unsigned byte, and signed and unsigned short integer.
% The number of bits in a data point is further limited by the internal
% algorithms to be at most 16, signed or unsigned. If an otherwise acceptable
% data type is found that exceeds 16 bits (say a 32 bit short) then an error
% message will be printed. Resolution of this problem is architecture dependent.
% 
% The histogram equalization can be performed in units of data that can span any
% of the polymorphic data model dimensions. By default, the unit is composed 
% of 2D planes across
% width and height (i.e. a normal "image"). It is possible to select processing
% in volumes, sequences, slices, rows, columns or the whole 5D data set if that
% is desired. Each unit is histogrammed independently of the others.
% 
% This operator
% supports processing of large data sets via data services. Data access speed is
% a function of the processing unit dimensions, so significant processing time
% variance can be observed for varying unit geometries even though the total
% number of points processed is the same.
% 
% Executing "Equalize Histogram" runs the program \fIkhistops\fP with 
% the -equalize flag.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
% DATAMANIP::khistops, DATAMANIP::khstr DATAMANIP::khisto
%
%  RESTRICTIONS 
% 
% Only KBYTE, KUBYTE, KSHORT, and KUSHORT data is supported, and only then if
% they are 16 bits or less in length.
%
%  REFERENCES 
% R.C. Gonzalez and P.A. Wintz, "Digital Image Processing", Addison-Wesley, 1987,
% ISBN 0-201-11026-1.
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kkheq(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkheq(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'invert', 0;'o', '__output';'whole', 0;'w', 0;'h', 0;'d', 0;'t', 0;'e', 0};
maxval={0,0,0,0,0,0,0,0,0};
minval={0,0,0,0,0,0,0,0,0};
istoggle=[0,1,0,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Toggle','OutputFile','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'khistops"  -equalize'],Inputs,narglist);
