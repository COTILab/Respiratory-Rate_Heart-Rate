%keditpseudo 'Interactively Edit Colormap Using Pseudocolor Method'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros editpseudo.pane file
%
% Parameters: 
% InputFile: i 'Input File', required: 'File containing colormap'
% Toggle: cmap_only 'Output Colormap Only?', default: 0: 'Output edited colormap only (not value data, etc)'
% Integer: x 'X Placement', default: -1: 'X location for GUI autoplacement'
% Integer: width 'Window Width ', default: 512: 'Window width'
% Integer: y 'Y Placement', default: -1: 'Y location for GUI autoplacement'
% Integer: height 'Window Height', default: 512: 'Window height'
% Double: update 'Update time', default: 1: 'How often to check input file for modification'
% OutputFile: o 'Output File', optional: 'Output file'
%
% Example: o = keditpseudo(i, {'i','';'cmap_only',0;'x',-1;'width',512;'y',-1;'height',512;'update',1;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% editpseudo - Interactively Edit Colormap Using Pseudocolor Method
%
%  DESCRIPTION
% "Editpseudo" is an application for interactively changing the colormaps of
% data objects using the pseudocoloring method. It is actually a front end
% (pane object) for "editcmap".
% 
% After the colormap has been modified as desired (see below), 
% click on the "Save" button
% to write out the modified colormap.  If the [-cmap_only] argument is specified,
% "only" the colormap will be written to the output file;  if the [-cmap_only]
% argument is not specified, all attributes and data from the input object will
% be written to the output file along with the modified colormap.
% 
% On creation, the main editpseudo window may be placed manually (the default
% method), or placed automatically.  For automatic placement of the main
% editpseudo window, specify the desired location in device (screen) coordinates,
% using the [-x] and [-y] arguments.
% 
% While the main editpseudo window should be created with a default size that
% is appropriate to the type of colormap modification (pseudocoloring or
% thresholding) being used, a width and height for the main editpseudo window
% can be specified explicitly using the [-width] and [-height] arguments.
% Alternatively, you may allow the main editpseudo window to size itself 
% initially, and then use the window manager to interactively modify its size as 
% desired.
% 
% If desired, editpseudo may be forced to use a private colormap with the [-priv]
% argument.
% 
% By default, the update time is 1, or every second;  this implies that editpsuedo
% will check the input file for modification every second.
% Suppose that while you are displaying a colormap with editpsuedo, the data
% object containing colormap is over-written.  After no more than one second
% had passed, editpsuedo will automatically register the fact that the data object
% has changed, and update the displayed colormap accordingly.  Setting the
% update time to 0.25 would cause editpsuedo to check the input file for potential
% modifications every 0.25 seconds, or 4 times a second.  Setting the update
% time to 0 would tell editpsuedo not to check the input file for modifications at
% all.  The update time is specified in seconds or fractions of a second, and
% must be greater than or equal to zero.
% .ce
% ---- Using the Pseudocolor Method of Colormap Modification ----
% 
%  "About the Pseudocolor Display"
% The pseudocolor display includes (1) a palette of the colors in which image
% pixels appear, (2) a set of Red, Green, and Blue scrollbars with text parameter
% boxes to the right of each, and (3) a "Reset" button at the upper right of the
% display.  The palette is used to display the current colors of the pixels
% in the image, and allows you to select pixels for color change.  The Red,
% Green, and Blue scrollbars allow you to specify colors for pixels.
% If desired, specific values for red, green, and blue may be typed directly
% into the text parameter boxes that appear to the right of the scrollbars.
% The "Reset" button causes all selected pixels in the palette to be un-selected,
% so that the pseudocoloring process may be repeated.
% 
%  "Performing a Pseudocolor Operation"
% .in +1i
% 
%  "1:"
% Select the desired pixels from the color palette
% 
%  "2:"
% Specify the desired color by typing in Red, Green, and Blue values
% or by moving the Red, Green, and Blue scrollbars
% 
%  "3:
% Click on the "Reset" button to unselect pixels and begin again.
% By default, the color palette appears in the form of a grid of color cells.
% Each color cell represents a pixel in the input image, and appears in the
% same color as the pixel does in the image.  The color cells are arranged in
% the order that the pixels appear in the image's colormap; ie, the upper
% leftmost colorcell is the first color in the colormap and lower rightmost
% pixel box is the last color in the colormap.
% .in -1i
% 
% Pixels may be selected for color change using the following methods.  These
% descriptions assume use of the colorcell grid, but pixel
% selection for the color bar and color wheel work similarly.
% Pixels may be selected individually, or in ranges.  Note that
% "all" selected pixels on the colorcell grid will have their
% color changed when you set the red, green, and blue values.
% The "Reset" button un-selects "all" selected pixels
% in the colorcell grid.
% .in +1i
% 
%  "Selecting a single pixel"
% To select a single pixel for color change, click on
% the color cell representing the desired pixel.  The
% color cell will appear intented and stippled when it
% is selected.  To unselect the pixel, click the mouse
% button on it again, or use the "Reset" button.
% 
%  "Selecting a range of pixels"
% To select a range of pixels for color change, click
% on a pixel at the end of the range to be changed.  Holding
% the button down, move the mouse to the desired end point;
% the range may be moved back and forth as long as the mouse
% button is held down. Releasing the mouse button sets the
% range. Multiple ranges may be selected by repeating this
% process on previously unselected pixels.  Portions of a
% selected range may be unselected by repeating on previously
% selected pixels.  To unselect the range, repeat the
% selection process, or use the "Reset" button.
% .in -1i
% 
%  "Options of the PseudoColor Object"
% Click on the "Options" button to display the internal menuform which is
% associated with the pseudocolor object.  Using the menuform of the pseudocolor
% object, you may change the palette type used by the psuedocolor object from
% Color Cell to Color Bar or Color Wheel.  For more details on the features
% offered by the psuedocolor object, click on the "Help" button of the
% pseudocolor object menuform.
%
%  
%
%  EXAMPLES
% 
%  "Example 1"
% % editpseudo -i image:moon -cmap_only -o new_cmap.viff
% % putimage -i image:moon -cmap new_cmap.viff
% 
%  "Example 2"
% % editpseudo -i image:ball -o new_moon.viff
% % putimage -i new_moon.viff
%
%  "SEE ALSO"
% editcmap(1), edithresh(1), editimage(1)
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = keditpseudo(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = keditpseudo(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'cmap_only', 0;'x', -1;'width', 512;'y', -1;'height', 512;'update', 1;'o', '__output'};
maxval={0,0,1000,1000,1000,1000,1,1};
minval={0,0,-1,-1,-1,-1,1,1};
istoggle=[0,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Toggle','Integer','Integer','Integer','Integer','Double','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'editcmap"  -pseudo'],Inputs,narglist);
