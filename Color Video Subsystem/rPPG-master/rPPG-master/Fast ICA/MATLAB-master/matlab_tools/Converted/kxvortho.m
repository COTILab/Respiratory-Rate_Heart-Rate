%kxvortho 'Visualize and navigate by orthogonal planes in a volume'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros xvortho.pane file
%
% Parameters: 
% InputFile: i ' Input Image ', optional: 'Input image filename'
% InputFile: cmap 'Colormap Image', optional: 'input alternate colormap file'
% Integer: x 'X Placement', default: -1: 'x location for GUI autoplacement'
% Integer: y 'Y Placement', default: -1: 'y location for GUI autoplacement'
% Double: update 'Update Time', default: 0: 'initial update time'
%
% Example: kxvortho({i, cmap}, {'i','';'cmap','';'x',-1;'y',-1;'update',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% xvortho - Interactively navigate by orthogonal planes in a volume
%
%  DESCRIPTION
% "xvortho" is an interactive tool which allows navigation by any input
% object. 
% The features provided by "xvortho" include:
% - An input file history list
% - Normalization of colormaps
% - Control over which columns of the map data are displayed as red, green, and blue
% - Application of functions to the map data values to produce new colormaps
% - Pre-defined colormap installation
% 
% The master form of "xvortho" displays the input object in a workspace.
% The object is displayed as three orthogonal planes, named planes X, Y
% and Z, as the input object was a 3D volume. 
% Plane X corresponds to a constant dimention w and it is a function of d and h. 
% Plane Y corresponds to a constant dimention h and it is a function of w and d.
% Plane Z corresponds to a constant dimention d and it is a function of w and h. 
% 
% The initial configuration shows plane X with w=0, plane Y with h=0 and
% plane Z with d=0. Initial time and element dimentions are also zero. Clicking
% in one of the three displayed planes is equivalent to changing the choosen
% positions w, h or d, depending on which plane the cursor was pointing on
% during the clicking. For instance, if we are in the position w=10, h=20 and 
% d=30, and the cursor is in the plane Z, on the
% position (50,100) when the button is pressed, then the new positions in w and
% h will be 50 and 100 respectively, which will cause the planes X and Y to be
% updated. Changing of time and element dimentions are also possible using
% scroll bars on the bottom of the workspace.
% 
% Above the workspace are "License", "Help", and "Quit" buttons, from which one
% may access the license agreement, display online help pages, and quit the
% program, respectively.  To the left of the image workspace are two subform
% buttons labeled "Files" and "Options".
% 
% Use the "Files" subform button to display the "Input and Output Files" subform.
% From this subform, you may input a new image. You may also output any of the
% three displayed
% images, either as they currently appears, or as they really are in the input
% image.
% 
% A number of features are available from the "Options" subform, which
% contains three panes: "Image List", "Display" and "Colormaps". Those were
% adapted from editimage.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
% editimage
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993, 1994, 1995 UNICAMP, R A Lotufo,  All rights reserved.
% 


function varargout = kxvortho(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kxvortho(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'cmap', '__input';'x', -1;'y', -1;'update', 0};
maxval={1,1,1000,1000,1};
minval={1,1,-1,-1,1};
istoggle=[1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Integer','Integer','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'xvortho"  '],Inputs,narglist);
