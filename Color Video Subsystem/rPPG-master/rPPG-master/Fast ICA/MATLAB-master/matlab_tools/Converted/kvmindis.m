%kvmindis 'Minimum Distance Classifier (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vmindis.pane file
%
% Parameters: 
% InputFile: i1 'Input Image ', required: 'input image to be classified'
% InputFile: i2 'Input Center/Class Image', required: 'input center/class image'
% Integer: b 'Border Width ', default: 0: ' specifies the border width in pixels (default = 0)'
% OutputFile: o 'Output Classified Image ', required: 'output specifying which vector belongs to which cluster'
%
% Example: o = kvmindis({i1, i2}, {'i1','';'i2','';'b',0;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vmindis - Minimum Distance Classifier  (K1)
%
%  DESCRIPTION
% .I vmindis
% is a simple minimum distance classifier. The distance metric used
% to the Euclidean distance. This routine accepts two images as the 
% input. The image that corresponds to the -i1 argument is the image
% that needs to be classified. This image can be have as many data
% bands as necessary. The number of data bands depicts the dimensionality
% of the vectors. Each pixel in the image is a vector with dimensionality
% of the number of data bands.
% 
% The other input image which corresponds to the -i2 argument is
% the prototype image. The last data band of this image is the
% class data band. This image must contain the same number of data
% bands as the other input image plus an extra data band that represents
% the class mapping. This
% image would most likely have been created by vkmeans or some other
% routine that will give cluster centers. This image contains vectors that
% correspond to the prototype of each class.
% 
% As stated above the center image's last data band is a class data band. The
% class data band simply maps each vector in the center image to the final class.
% 
% At this point most class images must be created manually.
% A class image can be created by using pseudo color in editimage 
% on the resulting clustered image from the 
% vkmeans routine. Vcustom can then be used to create the class image. Finally 
% kinset can be used to add the class image data to the center image. Normally
% one would over cluster using vkmeans then reduce the space down. So vkmeans
% might produce 100 clusters but, really only 3 clusters are desired. Pseudo
% color in editimage and kasc2val can be used to reduce the space down and
% create a class image. The class data might map cluster center vectors 1-50
% to class 1, vectors 51-60 to class 2 and vectors 61-100 to class 3. 
% When the vmindis routine is run, the result would be a classified image of
% three classes.
% 
% The border option (-b) allows the user to specify a border width,
% in pixels, encompassing the image. The border region is skipped
% by vmindis when classification is performed. 
% This useful if neighborhood operators have been used 
% previously and have not updated edge pixels.
% 
% All input images must be of data storage type FLOAT.
%
%  
%
%  EXAMPLES
% vmindis -i1 aerial_image.xv -i2 vkmeans_centers -b 5 -o test
% 
% aerial_image.xv is a 5 band image; thus, each vector has dimensionality of 5,
% vkmeans_centers image is a 6 band image, 5 bands are the cluster center values
% produced by vkmeans and 1 class band.
% The border that vmindis will ignore is 5 pixels wide. the output image will be
% a single band image called test.
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% All input images must be of data storage type FLOAT.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvmindis(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvmindis(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i1', '__input';'i2', '__input';'b', 0;'o', '__output'};
maxval={0,0,100,0};
minval={0,0,0,0};
istoggle=[0,0,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vmindis"  '],Inputs,narglist);
