%kMulWave 'multiplies each element with exp(-ikx) '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros MulWave.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'First Input data object'
% InputFile: OrderFactors 'Order Factors', optional: 'a matrix which supplies float value order factors (positive or negative)'
% Integer: nx 'OrdersX', default: 2: 'number of orders along x (0 .. +- OrdersX)'
% Integer: ny 'OrdersY', default: 0: 'number of orders along y (0 .. +- OrdersY)'
% Toggle: auto 'Determine Grid automatically', default: 0: 'if selected, the grid values are ignored and the grid position, direction and shift is determined from the first order in X and Y'
% Integer: aorderx 'UseOrder X #', default: 1: 'which order to use for shift determination'
% Integer: aordery 'Y', default: 1: 'which y order to use for shift determination'
% Double: angle 'Angle', default: 0: 'angle, with which the pattern is oriented to the X-Axis'
% Double: periodx 'Grid Spacing X', default: 4: 'number of pixels from grid to grid element'
% Double: periody 'Grid Spacing Y', default: 4: 'number of pixels from grid to grid element'
% Toggle: autom 'Determine Gridshift automatically', default: 0: 'The grid zero position will be determined automatically'
% Double: mx 'Grid shift X [rad]', default: 0: 'exp(-i val) will be applied to first order peak in X'
% Double: my 'Y [rad]', default: 0: 'exp(-i val) will be applied to first order peak in Y'
% Double: of 'Order Enhancement Factor', default: 1: 'Will determine the enhancement of higher orders in the sum'
% Double: zw 'Zero Order Weight', default: 1: 'if 1.0, the zero order will not have and ignore radius, if ==0.0 the zero order will be ignored in the center like all other orders'
% Double: ir 'Ignore Zero Radius', default: 0: 'The reconstructed zero peak in each order is ignored by weigthing with a certain gaussian radius'
% Double: ar 'Apodize Radius', default: 0: 'relative max. frequency to apodize to by a cos window (linear edge), see Gabor 1946. If this is zero, no apodization will be performed and the orders will be plainly added'
% Double: ary 'Apo Radius Y', default: 0.9: 'If given an anisotropic apodization will be performed'
% Double: kxmax 'Order Kmax X', default: 0.5: 'This defines the border of each reconstructed peak, as a relative frequency'
% Double: kymax 'Order Kmax Y', default: 0.5: 'This defines the border of each reconstructed peak, as a relative frequency'
% OutputFile: o 'Output', required: 'Resulting output data object'
% OutputFile: sum 'Sum', required: 'The sum of all elements (reconstructed Fourier-components) will be stored here'
% OutputFile: pat 'Patterns', optional: 'If given, patterns will be generated for each class of distances and saved (each class along depth), moved patterns along elements.'
% Integer: PStepsX 'Pattern Steps X', default: 3: 'Number of steps along X for pattern movement'
% Integer: PStepsY 'Y', default: 3: 'Number of steps along Y for pattern movement'
%
% Example: [o, sum, pat] = kMulWave({i, OrderFactors}, {'i','';'OrderFactors','';'nx',2;'ny',0;'auto',0;'aorderx',1;'aordery',1;'angle',0;'periodx',4;'periody',4;'autom',0;'mx',0;'my',0;'of',1;'zw',1;'ir',0;'ar',0;'ary',0.9;'kxmax',0.5;'kymax',0.5;'o','';'sum','';'pat','';'PStepsX',3;'PStepsY',3})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% MulWave - multiplies each element with exp(-ikx)
%
%  DESCRIPTION
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996-2003, Rainer Heintzmann,  All rights reserved.
% 


function varargout = kMulWave(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kMulWave(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'OrderFactors', '__input';'nx', 2;'ny', 0;'auto', 0;'aorderx', 1;'aordery', 1;'angle', 0;'periodx', 4;'periody', 4;'autom', 0;'mx', 0;'my', 0;'of', 1;'zw', 1;'ir', 0;'ar', 0;'ary', 0.9;'kxmax', 0.5;'kymax', 0.5;'o', '__output';'sum', '__output';'pat', '__output';'PStepsX', 3;'PStepsY', 3};
maxval={0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1};
minval={0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1};
istoggle=[0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Integer','Integer','Toggle','Integer','Integer','Double','Double','Double','Toggle','Double','Double','Double','Double','Double','Double','Double','Double','Double','OutputFile','OutputFile','OutputFile','Integer','Integer'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=2; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'mulwave"  -k'],Inputs,narglist);
