%klas_karlov 'Karhonen-Loeve transformation of a multispectral image '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros las_karlov.pane file
%
% Parameters: 
% InputFile: i 'Input image ', required: 'Input multispectral image object'
% OutputFile: o 'Output image', optional: 'Output principal component image'
% Integer: outbands 'Output Number of Bands', default: 0: 'Output number of bands. Default is number of bands in input image.'
% OutputFile: statsfile 'Output Statistics File', optional: 'Output statistics file'
%
% Example: [o, statsfile] = klas_karlov(i, {'i','';'o','';'outbands',0;'statsfile',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% las_karlov - Karhonen-Loeve transformation of a multispectral image
%
%  DESCRIPTION
% las_karlov computes the principal components of a multi-band 
% image by performing a Karhunen-Loeve transformation on the image.  The 
% transformation is given by z = T(f-m), where T is a matrix whose rows are the 
% eigen vectors of the covariance matrix, f is the input image multi-pixel vector, 
% m is the mean vector, and z is the output image multi-pixel vector.
% 
% If mean subtraction is not desired, then z = Tf is computed.
% The output image is normally output as REAL*4 data.  Scaled BYTE
% data may also be selected for output.
% 
% The K-L transform generates a set of uncorrelated component images
% from the original multi-band image.  It results in a lower-dimensional 
% representation of the multi-band image that retains
% most of the variance from the original data.
% 
% The principal component vectors are computed at each image pixel
% point from the N original components of the multi-band image by the
% transformation z=Tf or Z=T(f-m), as desired.  In this computation,
% f is a vector of intensity values associated with each pixel; m is
% the mean vector of the image; T is an N x N orthogonal
% transformation matrix, the rows of which are the normalized 
% eigenvectors of the image covariance matrix C, arranged with the 
% eigenvalues in descending order; and z is the vector of principal 
% components, which is calculated independently at each pixel point.
% Only those selected components less than or equal to N are output.
% 
% If desired, the output images are scaled to be BYTE values.  Estimates 
% (Emin and Emax) of the minimum and maximum pixel values of
% the output multi-band image are computed using the values of the
% eigenvector matrix T and the input multi-band image minimum and
% maximum pixel values.  The output images are then linearly scaled
% such that the range (Emin, Emax) is mapped to (0,255).
% 
% las_karlov uses the mean vector and covariance matrix of the entire 
% image.  The eigenvalues and eigenvectors of the covariance matrix C 
% are computed to generate the transformation matrix T.
% 
% las_karlov displays the eigenvalues, eigenvectors, the percentage
% of the total data variation for each eigenvalue, and the
% cumulative percentage variation of the eigenvalues on output.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
% This program is modeled after the Land Analysis System (LAS)
% program "karlov."
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc.  All rights reserved.
% 


function varargout = klas_karlov(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = klas_karlov(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'o', '__output';'outbands', 0;'statsfile', '__output'};
maxval={0,1,1,1};
minval={0,1,1,1};
istoggle=[0,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'las_karlov"  '],Inputs,narglist);
