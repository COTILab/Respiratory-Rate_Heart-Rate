%kuisupdate 'Updates an old Khoros 1.0 Patch 5 UIS file to a new Khoros 2.0 UIS file.'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros uisupdate.pane file
%
% Parameters: 
% InputFile: i 'Old UIS file', required: 'old UIS file'
% Toggle: force 'Force Overwrite?', default: 0: 'force over-write of old UIS file (suppress prompting)?'
%
% Example: kuisupdate(i, {'i','';'force',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% uisupdate - Updates an old Khoros 1.0 Patch 5 UIS file to a new Khoros 2.0 UIS file.
%
%  DESCRIPTION
% 
% This program will update a Khoros 1.0.5 UIS file to a Khoros 2 UIS file.
% It will make a backup of the Khoros 1.0.5 UIS file, called {uis_filename}.old.
% 
% After running uisupdate on a UIS file, check the results using "preview" or
% "guise". 
% 
% NOTE that error checking of UIS files in Khoros 2, both for syntax
% and for logic, is much more stringent than it was in Khoros 1.0;  therefore,
% a correctly updated UIS file may still produce errors when an attempt is made
% to display it with the Khoros 2 "preview" or "guise".  Error messages are
% fairly self-explanatory;  simply read the message and fix the error with your
% visual editor.
% 
% You will notice that converted GUI's do not look as good as they did under
% Khoros 1.0.  This is because interpretations of geometry strings have changed
% somewhat for Khoros 2, due to the support of multiple widget sets.  After 
% using uisupdate to update a UIS file, it is strongly recommended that you use 
% guise to interactively "clean up" your GUI so that it looks good under 
% Khoros 2.  In particular, you may notice that logical, list, and cycle 
% selections might be truncated to the point where you cannot read the label
% on the button.  Also, buttons that looked good with a height of 2 under
% Khoros 1.0 will look big and awkward under Khoros 2; use guise to resize
% them down if desired.  
% 
% Also be aware that if desired, you may use guise to "turn off" the scrollbar
% on an integer or float selection you don't want it.  Double selections are
% also supported under Khoros 2;  you may have cases where a double selection
% is more appropriate than the float selection that was used in Khoros 1.0.
% 
% The new "stringlist" selection may be useful in cases where you want the
% user to input a string, but there are a number of "most commonly used" strings
% that could be used in a pulldown menu.  Use the stringlist selection if it
% is appropriate.
% 
% In addition to the Mutually Exclusive groups (choose ONE and ONLY ONE) supported
% by Khoros 1.0, Khoros 2 also supports Mutually Inclusive groups 
% (choose ALL or NONE)  and Loose Groups (choose AT LEAST ONE).  There may be
% situations where one of the latter grouping types may be appropriate.
% 
% Both Help (-H) lines and Blank (-b) lines in the Khoros 2 UIS file have 
% variable names, where they did not have one in Khoros 1.0.  Uisupdate will 
% put in a variable name for you, but the name is simply "help%d" or "blank%d",
% where %d is the number of help or blank lines in the UIS file.  Since these
% variable names are not very descriptive, you may want to change them to 
% something more intelligent. 
%
%  
%
%  EXAMPLES
% The following two example panes are a syntactically correct Khoros 1.0 pane
% file followed by the syntactically correct Khoros 2 pane file that
% is generated by uisupdate from the Khoros 1.0 pane.
% \s-1
% \f(CW
% 
% % cat vgef.pane
% -F 4.2 1 0 0x0+0+0 +0+0 'Cantata' cantata
%   -M 1 0 100x40+10+20 +27+1 '2D Spatial Domain Filters' 2Dspatl
%      -P 1 0 80x38+22+2 +14+0 'First Derivative Operator' vgef
%         -b +12+1 'for Symmetric Exponential Filter'
%         -I 1 0 0 1 0 1 50x1+2+3 +0+0 ' ' 'Input  Image' 'input image' i
%         -O 1 0 0 1 0 1 50x1+2+4 +0+0 ' ' 'Output Image' 'output image' o
%         -b +2+6 'Filter Parameters:'
%         -f 1 0 1 1 0 48x1+4+7 +0+0 0 1 0.45 ' a0 ' 'Filter Parameter GEF' a0
%         -b +2+9 'Hysteresis Thresholds:'
%         -i 1 0 1 1 0 48x1+4+10 +0+0 0 255 3 ' T1 ' '1st Hysteresis Threshold' t1
%         -i 1 0 1 1 0 48x1+4+11 +0+0 0 255 4 ' T2 ' '2nd Hysteresis Threshold' t2
%         -b +2+13 'Minimum Length of a Segment (in Pixels):'
%         -i 1 0 1 1 0 48x1+4+14 +0+0 0 100000 5 'Length' 'Minimum Pixel Number in a Segment' l
% 	-R 1 0 1 13x2+1+16 'Execute' 'do operation' vgef
%         -H 1  13x2+39+16 'Help' 'man page for visef' KHOROS_HOME/doc/manpages/vgef.1
%      -E
%   -E
% -E
% 
% % uisupdate -i vgef.pane
% Overwrite 'vgef.pane'? (Yes/No) [Yes]: y   
% UIS written to file vgef.pane
% 
% % cat vgef.pane
% -F 4.3 1 0 20x5+0+0 +0+0 'Cantata' cantata
%   -M 1 1 20x5+10+20 +27+1 '2D Spatial Domain Filters' 2Dspatl
%     -P 1 0 80x38+22+2 +14+0 'First Derivative Operator' vgef
%       -b +12+1 'for Symmetric Exponential Filter' blank0
%       -I 1 0 0 1 0 1 50x1+2+3 ' ' 'Input  Image' 'input image' i
%       -O 1 0 0 1 0 1 50x1+2+4 ' ' 'Output Image' 'output image' o
%       -f 1 0 1 1 0 48x1+4+7 0 1 0.45 0 1 0 ' a0 ' 'Filter Parameter GEF' a0
%       -i 1 0 1 1 0 48x1+4+10 0 255 3 1 0 ' T1 ' '1st Hysteresis Threshold' t1
%       -i 1 0 1 1 0 48x1+4+11 0 255 4 1 0 ' T2 ' '2nd Hysteresis Threshold' t2
%       -i 1 0 1 1 0 48x1+4+14 0 100000 5 1 0 'Length' 'Minimum Pixel Number in a Segment' l
%       -R 1 0 1 13x2+1+16 'Execute' 'do operation' vgef
%       -b +2+6 'Filter Parameters:' blank1
%       -b +2+9 'Hysteresis Thresholds:' blank2
%       -b +2+13 'Minimum Length of a Segment (in Pixels):' blank3
%       -H 1  6x1+39+16 'Help' 'man page for visef' KHOROS_HOME/doc/manpages/vgef.1 help
%     -E
%   -E
% -E
% 
% 
% "
% \s+1
%
%  "SEE ALSO"
% kdarwin(1), kfixpane(1)
%
%  RESTRICTIONS 
% 
% Unfortunately, uisupdate is not smart enough to follow paths to other
% UIS files that are included with (-k) or (-p) lines.  If your UIS file includes
% a subform UIS files using the (-k) line, or a pane UIS file using a (-p) line,
% you will have to follow this procedure:
% 
%  1. 4
% Use '#' in the 1st column to comment out the (-k) line and its corresponding
% (-d) line, or to comment out the (-p) line and its corresponding (-g) line.
% 
%  2. 4
% Run uisupdate on all the UIS files individually, both the UIS file that
% includes the others and the others that are included.
% 
%  3. 4
%  Make sure that the variable name on the (-d) line matches that of the (-M)
% line in the included subform file, and that the variable name on the (-g) line
% matches that of the (-P) line in the included pane file.  In Khoros 1.0 UIS
% files, subform buttons were matched with subforms and guide buttons were matched
% with panes according to their order of occurrance in the UIS file.  In Khoros
% 2, they are matched according to the variable name, which must be identical
% for each pair.
%
%  REFERENCES 
% Migration Toolbox Manual
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kuisupdate(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kuisupdate(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'force', 0};
maxval={0,0};
minval={0,0};
istoggle=[0,1];
was_set=istoggle * 0;
paramtype={'InputFile','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'uisupdate"  '],Inputs,narglist);
