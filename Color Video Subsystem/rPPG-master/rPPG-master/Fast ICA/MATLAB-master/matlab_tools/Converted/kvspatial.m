%kvspatial 'Compute Spatial Features Using NxM Window (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vspatial.pane file
%
% Parameters: 
% InputFile: i 'Input Image ', required: 'input image filename'
% Integer: w 'Window width ', default: 3: 'window width argument'
% Integer: h 'Window height', default: 3: 'window height argument'
% OutputFile: o 'Output Image', required: 'output image filename'
%
% Example: o = kvspatial(i, {'i','';'w',3;'h',3;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vspatial - Compute Spatial Features Using NxM Window  (K1)
%
%  DESCRIPTION
% .I vspatial
% performs a spatial feature extraction on an image using a selected 
% statistical operation.  The statistical operation is computed, using
% overlapping windows, over the entire image.  The center pixel is updated
% in each window based on the calculated statistics of that window.  
% 
% The input image, which must be of data storage type BYTE, corresponds
% to the -i argument.  The output image, which corresponds to the -o
% argument, is stored as data type FLOAT.  The output image may be a 
% multiband image depending on how many spatial operators were selected.
% The resulting image will have a border of pixels of value 0, since the
% window operation does not calculate values for border pixels.
% 
% The width and height of the window is specified by the -w and -h window
% width and height arguments.  The width and height arguments cannot be an
% even number.  The window dimensions must be odd (ie. 3x3, 5x5, 7x7, etc.),
% since the center pixel is replaced with the computed value of the window
% data.  The default window size is 3x3.
% 
% Each pixel in the image is updated with a computed value except the border
% pixels.  A 3x3 window will result in a border of one pixel, a 5x5 window
% will result in a border of two pixels, etc.
% 
% There are six statistical operations that may be selected.  Any combination
% of the statistical operations may be selected by toggling the desired 
% argument on (ie. argument followed by a 1).  The default for each argument
% is unselected (ie. argument followed by a 0), except -m (mean), which is 
% selected.  The six possible statistical operations and their arguments are:
% .DS
%   -m  --  calculates the mean of the image.
%   -v  --  calculates the variance of the image.
%   -c  --  calculates the contrast of the image.
%   -s  --  calculates the angular second moment of the image.
%   -e  --  calculates the entropy of the image.
%   -d  --  calculates the dispersion of the image.
% .DE
% The resulting feature vector may contain from one to six bands of data,
% depending upon the number of arguments selected.
% 
% All input images must be of data storage type BYTE. 
% 
% All output images are of data storage type FLOAT.
%
%  
%
%  EXAMPLES
% vspatial -i input_image.xv -w 5 -h 5 -m 0 -v 1 -e 1 -o output_image
% 
% the input image must of type BYTE; the selected width and height of the 
% window is 5 x 5, which will result in a border width of two pixels in the
% output image.  The mean spatial operator is unselected (default is selected),
% and the variance and entropy operations are selected, which will result in
% an output image (feature vector) of 2 bands, based on the operations selected.
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% 
% All input images must be of data storage type BYTE.
% 
% All output images are of data storage type FLOAT.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvspatial(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvspatial(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'w', 3;'h', 3;'o', '__output'};
maxval={0,64,64,0};
minval={0,1,1,0};
istoggle=[0,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vspatial"  '],Inputs,narglist);
