%kkgenloc 'Generate Location Data'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kgenloc.pane file
%
% Parameters: 
% InputFile: i 'Input ', optional: 'First Input data object'
% MultiChoice: grid 'Grid Type :', default: 1: 'Grid Type to use when creating Location Data'
%    Choices are:
%   1: 'Uniform'
%   2: 'Rectilinear'
%   3: 'Curvilinear'
% Integer: wsize ' Width ', default: 512: 'Width of location data'
% Integer: hsize ' Height ', default: 512: 'Height of location data'
% Integer: dsize ' Depth ', default: 1: 'Depth of location data'
% OutputFile: o 'Output', required: 'Resulting output data object'
%
% Example: o = kkgenloc(i, {'i','';'grid',1;'wsize',512;'hsize',512;'dsize',1;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kgenloc - Generate Location Data
%
%  DESCRIPTION
% "kgenloc" creates explicit location data in the specified
% destination object (-o). If an input source object is provided (-i)
% then any data segments in that source object will be copied to the
% destination object.
% 
% The explicit location data is specified by three sets of begin and end
% values (-xbegin, -xend), (-ybegin, -yend), (-zbegin, -zend) which
% together compose explicit corner markers for volume in (x,y,z) three
% space.  The x-axis corresponds uniformly to the implicit width
% dimension on the polymorphic data model, with the y-axis and z-axis
% corresponding to implicit height, and depth dimensions, respectively.
% 
% Data is generated uniformly from those specified corner markers,
% however the explicitness of the generated data can be specified by the
% grid (-grid) option.  A KUNIFORM grid will dictate that the generated
% data consist simply of setting the uniform corner markers on the
% output data set.  A KRECTILINEAR grid will dictate that the generated
% data consist of three arrays of locations, an x-array, a y-array, and
% a z-array, with the data within those arrays changing uniformly over
% the specified (x,y,z) begin and end values.  A KCURVILINEAR grid will
% dictate that the generated data consist of a four dimensional array of
% location data.  Essentially, this data set is a three dimensional
% array of (x,y,z) points.
% 
% The size and datatype of the resulting location data segment can be
% specified.  The size of the location segment is controlled with three
% parameters (-wsize, -hsize, -dsize) which correspond to the implicit
% width, height, and depth of the location segment.  The dimension size
% of the destination location segment will always be three corresponding
% to the size of the location points (x,y,z).  The data type of the
% location segment is controlled with a single parameter (-type).
% 
% Any size specifications will be overwritten by existing size
% information in the input source object.  If the input source object
% contains any explicit location data, the size and data type of the
% existing location segment will be used to determine the size and data
% type of the destination location segment.  Any explicit location data
% in the source object will be destroyed in favor of the newly generated
% data.  Additionally, if the input source object contains no explicit
% location segment but does contain a value segment or a mask segment,
% the width, height, and depth size of either of those segments will be
% used to set the width, height, and depth size of the destination
% location segment.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
% ksetdattr
%
%  RESTRICTIONS 
% The data is generated and stored as one block, so generating large
% location data sets are subject to the memory limitations of your
% machine.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kkgenloc(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkgenloc(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'grid', 1;'wsize', 512;'hsize', 512;'dsize', 1;'o', '__output'};
maxval={1,0,2,2,2,0};
minval={1,0,2,2,2,0};
istoggle=[1,0,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','MultiChoice','Integer','Integer','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'kgenloc"  '],Inputs,narglist);
