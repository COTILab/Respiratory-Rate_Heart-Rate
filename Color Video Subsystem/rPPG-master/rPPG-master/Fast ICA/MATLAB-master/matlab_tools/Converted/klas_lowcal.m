%klas_lowcal 'Performs a selected sliding-window local operation on an input object '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros las_lowcal.pane file
%
% Parameters: 
% InputFile: i 'Input image ', required: 'Input image object.'
% OutputFile: o 'Output image', required: 'Resulting output image object.'
% Integer: niter 'Iterations: ', default: 1: 'Number of iterations.'
% Integer: nbins 'Number of bins: ', default: 0: 'Number of bins.'
% Integer: minval 'Minimum bin occupancy: ', default: 0: 'Minimum bin occupancy.'
% Integer: nnn 'Number of Nearest Neighbors: ', default: 0: 'Number of nearest neighbors.'
% Integer: nnthr 'Number of Neighbor Pixels: ', default: 0: 'No. of neighbor pixels which must differ in abs. value from center pixel by >= thrval'
% Double: thrval 'Threshold Value: ', default: 0: 'Threshold value for selective mean.'
%
% Example: o = klas_lowcal(i, {'i','';'o','';'niter',1;'nbins',0;'minval',0;'nnn',0;'nnthr',0;'thrval',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% las_lowcal - Performs a selected sliding-window local operation on an input object
%
%  DESCRIPTION
% .I las_lowcal 
% performs a selected sliding-window local operation on an input image.  
% The following operations are supported:
% 
% 
% 			Mean window
% 			Standard deviation window
% 			Variance window
% 			Quantized mode window
% 			Minimum window
% 			Maximum window
% 			Median window
% 			Median absolute-neighbor average
% 			Sharp window
% 			K nearest-neighbor average
% 			Selective average
% 			Mean subtraction window
% 
% 
% Each of the available operations may be iterated a
% number of times as specified by the user.  The output
% image has the same dimensions as the input image.
% NOTE:  The seperable convolution option from the LAS version
% is not implemented here.  Use the Khoros function "kconvolve"
% instead.
% 
% 
%  "Mean window:" 10
% The pixel value of the center pixel of the
% window is replaced by the mean of the pixel values of
% all pixels within the window, including the center pixel.
% 
%  "Standard deviation window:" 10
% The pixel value of the
% center pixel of the window is replaced by the standard
% deviation of the pixel values of all pixels within the
% window, including the center pixel.
% 
%  "Variance window:" 10
% The pixel value of the center pixel of
% the window is replaced by the variance of the pixel
% values of all pixels within the window, including the
% center pixel.
% 
%  "Quantized mode window:" 10
% The pixel value of the center pixel in the
% window is replaced by the mode of all pixels in the window,
% including the center pixel, provided the bin occupancy for the mode pixel
% value is greater than or equal to a threshold.  If the mode does
% not pass this threshold test, or if there is no unique single mode,
% then the pixel value of the center pixel is replaced by the center
% pixel value of its bin.  pixel value quantization is used to assign
% each pixel value to a histogram bin (parameter -nbins). The width of
% each bin is based on the range of the entire input image or image
% window divided by -nbins.  Each bin is inclusive of the lowest pixel
% value in its interval, but exclusive of the highest, except for the
% last bin, which includes values at both ends of its interval.
% 
%  "NOTE: Special parameters for this operation are:" 15
% 
%  " " 15
% -nbins:  Number of bins.  Number of bins in which to accumulate
% values.  Pixel value quantization is used to reduce the
% number of histogram bins from one per pixel value to a
% user-specified number, -nbins.  -nbins must be specified
% nonnegative and at most 256.  If -nbins = 0 (the
% default) is specified, then -nbins is set equal to
% the number of pixels in the sliding-window (-window).
% 
%  " " 15
% -minval:  Minimum bin occupancy required for mode values. The
% value of the center pixel is replaced by the mode of
% all pixels in the window, including the center pixel,
% provided that the mode is greater than or equal to -minval.  
% -minval must be specified non-negative and at most
% the number of pixels in the sliding-window (-window).  
% If -minval = 0 (the default) is
% specified, then -minval is set equal to the closest
% integer to the square root of the number of pixels in the 
% sliding-window (-window).
% 
%  "Minimum window:" 10
% The pixel value of the center pixel of
% the window is replaced by the minimum of the pixel
% values of all pixels in the window, including the
% center pixel.
% 
%  "Maximum window:" 10
% The pixel value of the center pixel of
% the window is replaced by the maximum of the pixel
% values of all pixels in the window, including the
% center pixel.
% 
%  "Median window:" 10
% The pixel value of the center pixel of
% the window is replaced by the median of the pixel
% values of all pixels in the window, including the
% center pixel.
% 
%  "Median absolute-neighbor average:" 10
% The pixel value of
% the center pixel of the window is replaced by the
% median absolute deviation (MAD) of the pixel values of
% all pixels in the window, including the center pixel.
% The median for the window is first computed.  Then the
% absolute difference between this median and the pixel
% value of each pixel in the window is found.  The median
% of all these absolute differences is then the MAD.
% 
%  " " 10
% MAD = MEDIAN (|Xi-MEDIAN(X)|) for all i=1 to N
% 
%  "Sharp window:" 10
% The pixel value of the center pixel in the window is
% replaced by the pixel value of whichever of the two extreme values
% (minimum or maximum) is closest in pixel value to the center pixel.
% The extreme values are found from among all pixels in the window,
% including the center pixel.  If the absolute difference between the
% center pixel value and the maximum pixel value in the window is
% equal to the absolute difference between the center pixel value and
% the minimum pixel value in the window, then the center pixel value
% will be replaced by the minimum pixel value.
% 
%  "K nearest-neighbor average:" 10
% The pixel value of the
% center pixel in the window is replaced by the average
% of the pixel values of a user-specified number of 
% pixels whose pixel values are closest to that of the
% center pixel.  The center pixel is not considered in
% the average.
% 
%  "NOTE: Special parameter for this operation is:" 15
% 
%  " " 15
% -nnn:  Number of nearest neighbors that are closest in value
% to that of the center pixel.  -nnn must be specified
% non-negative and less than the number of pixels in the 
% sliding-window (-window). If -nnn = 0 (the default) is specified, 
% then -nnn is set equal to the nearest integer to the square root of
% the number of pixels in the sliding-window (-window).  
% Note that "nearest neighbor" means nearest in pixel value, 
% not nearest spatially.
% 
%  "Selective average:" 10
% The pixel values of the center
% pixel in the window is replaced by the average of the
% pixel values of all neighbors excluding the center
% pixel, provided that at least a user-specified number,
% -nnthr, of neighbors have pixel values values which
% differ in absolute value from that of the center pixel
% by an amount greater than or equal to a user-specified
% threshold value, -thrval.
% 
%  "NOTE: Special parameters for this operation are:" 15
% 
%  " " 15
% -nnthr:  Number of neighbor pixels which must differ in absolute
% value from the center pixel by an amount equal to or
% greater than -thrval. -nnthr must be specified non-negative 
% and less than the number of pixels in the sliding-window (-window). 
% If -nnthr=0 (the default) is specified, then -nnthr is set
% equal to the nearest integer to the square root of
% the number of pixels in the sliding-window (-window).
% 
%  " " 15
% -thrval:  Threshold value for selective mean.  -thrval must be
% non-negative.
% 
%  "Mean subtraction window:" 10
% The pixel value of the center
% pixel in the window is replaced by the difference
% between the pixel values of the center pixel and the
% mean of the pixel values of all pixels in the window,
% provided that this difference is nonnegative. If the
% difference is negative, then the pixel value of the
% center pixel is set to zero.
% 
%  "FOR ALL OPERATIONS:" 10
% Image boundaries are handled by zero padding the image outside the
% image boundaries.  This makes the results invalid for pixels that are
% less than half the window size from the image boundaries.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
% This program is modeled after the Land Analysis System (LAS) program "lowcal."
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc.  All rights reserved.
% 


function varargout = klas_lowcal(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = klas_lowcal(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'o', '__output';'niter', 1;'nbins', 0;'minval', 0;'nnn', 0;'nnthr', 0;'thrval', 0};
maxval={0,0,2,256,256,1,1,1};
minval={0,0,2,0,0,1,1,1};
istoggle=[0,0,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile','Integer','Integer','Integer','Integer','Integer','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'las_lowcal"  '],Inputs,narglist);
