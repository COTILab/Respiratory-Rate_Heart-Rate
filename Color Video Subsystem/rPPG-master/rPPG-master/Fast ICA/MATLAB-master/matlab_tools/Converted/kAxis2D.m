%kAxis2D '2D Axis Object Menuform'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros Axis2D.pane file
%
% Parameters: 
% String: axis2dAxisX.axisLabel 'X Axis Label', default: ' ': 'X Axis label'
% String: axis2dAxisY.axisLabel 'Y Axis Label', default: ' ': 'Y Axis label'
% String: axis2dAxisX.axisNumericalLabelsFormat ' ', default: ' ': 'numeric format for X axis label'
% String: axis2dAxisY.axisNumericalLabelsFormat ' ', default: ' ': 'numeric format for Y axis label'
%
% Example: kAxis2D( {'axis2dAxisX.axisLabel',' ';'axis2dAxisY.axisLabel',' ';'axis2dAxisX.axisNumericalLabelsFormat',' ';'axis2dAxisY.axisNumericalLabelsFormat',' '})
%
% Khoros helpfile follows below:
% .begin tagged
% .item "The 2D Axis Object"
% The 2D axis object provides a set of axes for use with 2D plots. 
% The 2D axis object is most effective inside an area object, so that
% it can control a world coordinate system that is consistent between
% itself and any plots that also appear inside the area object.  
% The 2D axis object is made up of a number of components such as labels,
% lines, grid marks, tic marks, numerical labels, and so on;  you may
% control which of these components are displayed.  A great amount
% of flexibility over axis labeling is supported.  The 2D axis can also be
% used to window the data.
% 
% The 2D axis menuform is divided into four panes: "Axis Range and Label,"
% "General Axis Attributes," "Precise Axis Attributes," and "Color Axis
% Attributes."  
% .item "Axis Range and Label" 
% This pane allows you to window
% the data.  It also allows you to specify the range for labelling,
% the number of tic marks, and the interval between tic marks.  In the future,
% it will also allow setting of symmetric axes, nice labels, and proportional
% plotting. 
% .item "General Axis Attributes" 
% This pane allows you to specify which
% of the various axis components are displayed, such as the box, the zero line,
% the tic marks, the axes labels, the grid, and so on.  It also allows you
% to specify the labels that are used on the X and Y axes.  
% .item "Precise Axis Attributes" 
% This pane lets you specify tic justification, grid 
% line width and line type, and the format that is used to display numerical 
% labels.
% .item "Color Axis Attributes" 
% This pane supports specification of the color used with each of the
% axis compontens.
% .end tagged


function varargout = kAxis2D(varargin)
Inputs={};
if nargin ==0
  arglist={'',''};
elseif nargin ==1
  arglist=varargin{1};
else error('Usage: [out1,..] = kAxis2D(arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'axis2dAxisX.axisLabel', ' ';'axis2dAxisY.axisLabel', ' ';'axis2dAxisX.axisNumericalLabelsFormat', ' ';'axis2dAxisY.axisNumericalLabelsFormat', ' '};
maxval={0,0,0,0};
minval={0,0,0,0};
istoggle=[0,0,0,0];
was_set=istoggle * 0;
paramtype={'String','String','String','String'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'Axis2D" '],Inputs,narglist);
