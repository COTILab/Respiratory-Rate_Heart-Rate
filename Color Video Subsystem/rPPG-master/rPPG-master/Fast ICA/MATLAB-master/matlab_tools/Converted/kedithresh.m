%kedithresh 'Interactively Edit Colormap Using Threshold Method'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros edithresh.pane file
%
% Parameters: 
% InputFile: i 'Input File', required: 'File containing colormap'
% Toggle: cmap_only 'Output Colormap Only?', default: 0: 'Output edited colormap only (not value data, etc)'
% Integer: x 'X Placement', default: -1: 'X location for GUI autoplacement'
% Integer: width 'Window Width ', default: 512: 'Window width'
% Integer: y 'Y Placement', default: -1: 'Y location for GUI autoplacement'
% Integer: height 'Window Height', default: 512: 'Window height'
% Double: update 'Update time', default: 1: 'How often to check input file for modification'
% OutputFile: o 'Output File', optional: 'Output file'
%
% Example: o = kedithresh(i, {'i','';'cmap_only',0;'x',-1;'width',512;'y',-1;'height',512;'update',1;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% edithresh - Interactively Edit Colormap Using Threshold Method
%
%  DESCRIPTION
% 
% "Edithresh" is an application for interactively changing the colormaps of
% data objects using the thresholding method.  It is actually a front end
% (pane object) for "editcmap".
% 
% After the colormap has been modified as desired (see explanation below), 
% click on the "Save" button
% to write out the modified colormap.  If the [-cmap_only] argument is specified,
% "only" the colormap will be written to the output file;  if the [-cmap_only]
% argument is not specified, all attributes and data from the input object will
% be written to the output file along with the modified colormap.
% 
% On creation, the main edithresh window may be placed manually (the default
% method), or placed automatically.  For automatic placement of the main
% edithresh window, specify the desired location in device (screen) coordinates,
% using the [-x] and [-y] arguments.
% 
% While the main edithresh window should be created with a default size that
% is appropriate to the type of colormap modification (pseudocoloring or
% thresholding) being used, a width and height for the main edithresh window
% can be specified explicitly using the [-width] and [-height] arguments.
% Alternatively, you may allow the main edithresh window to size itself initially,
% and then use the window manager to interactively modify its size as desired.
% 
% If desired, edithresh may be forced to use a private colormap with the [-priv]
% argument.
% 
% By default, the update time is 1, or every second;  this implies that edithresh
% will check the input file for modification every second.
% Suppose that while you are displaying a colormap with edithresh, the data
% object containing colormap is over-written.  After no more than one second
% had passed, edithresh will automatically register the fact that the data object
% has changed, and update the displayed colormap accordingly.  Setting the
% update time to 0.25 would cause edithresh to check the input file for potential
% modifications every 0.25 seconds, or 4 times a second.  Setting the update
% time to 0 would tell edithresh not to check the input file for modifications at
% all.  The update time is specified in seconds or fractions of a second, and
% must be greater than or equal to zero.
% 
% .ce
% ---- Using the Thresholding Method of Colormap Modification ----
% 
% Edithresh provides a mechanism with which you may perform pixel thresholding, 
% pixel clipping, or window contrast enhancement operations on the currently 
% displayed image.   Click on the "Options" button to display the internal
% menuform which is associated with the threshold object.  Using the menuform 
% of the threshold object, you may set the policy of the threshold object to 
% Pixel Clipping, Pixel Thresholding, or Window Contrast Enhancement.  You
% may also invert the thresholded region, or undo the thresholding.
% 
% 
%  "Pixel Clipping"
% Pixel clipping is used to mask out certain parts of the image so that
% only a desired range of pixels is observed.  Pixel clipping works by
% allowing a windowed region of the original pixel values to be displayed.
% The user selects the pixel value of the masked region; all values outside
% the windowed region will be set to this masked region pixel value.
% If the masked region pixel value does not exist in the colormap,
% the corresponding grey level value will be used.
% 
% 
% When the "Invert Region?" logical is set to "False", the original pixel
% values of the image will be displayed "inside" the region defined by
% the lower and upper scroll bars; this can be thought of as a bandpass filter.
% When the "Invert Region?" logical is set to "True", the original pixel
% values will be displayed "outside" the region defined by the lower
% and upper scroll bars; this can be thought of as a bandreject filter.
% 
% 
%  "Pixel Thresholding"
% Pixel thresholding is used to perform real-time image thresholding.
% It generates a binary (or 2 pixel value) image.  Pixel thresholding works by
% assigning a non-zero pixel value to the selected region; the rest of the image
% will be turned black.
% 
% 
% When the "Invert Region?" logical is set to "False", the pixels
% in the image "inside" the region defined by the lower and upper scroll
% bars will be displayed as white, and those outside the region will be displayed
% as black.  When the "Invert Region?" logical is set to "True", the
% opposite display is used, ie, those values "outside" the region defined
% by the lower and upper scroll bars will be displayed as white, and those
% inside the region will be displayed as black.
% 
% 
%  "Window Contrast Enhancement"
% Windowed thresholding is used to increase the contrast of
% the image in a particular pixel range, while masking out
% the other pixels in the image. Use the "Lower", "Upper" and "Range"
% scrollbars to interactively specify the region of pixel values that
% will have their contrast enhanced; all pixels outside the range will
% appear in black.  The pixel values inside the specified range will have
% their pixel values normalized to cover the entire range of pixels in the image;
% thus, this operation can be thought of as a histogram stretch.
% 
% 
% When the "Invert Region?" logical is set to "False", the pixels
% in the image "inside" the region defined by the lower and upper scroll
% bars will have their contrast enhanced.  When the "Invert Region?" logical
% is set to "True", the opposite display is used, ie, those values "outside"
% the region defined by the lower and upper scroll bars will have their
% contrast enhanced.
% 
% 
%  "Reset (undo thresholding)"
% This button resets the lower and upper values of the threshold range to the
% minimum and maximum values of the image being displayed.  This has the effect
% of undoing any prior thresholding operations, and setting the image back
% to its "un-thresholded" state.
%
%  
%
%  EXAMPLES
% 
%  "Example 1"
% % edithresh -i image:mandril -cmap_only -o cmap.viff
% % putimage -i image:mandril -cmap cmap.viff
% 
%  "Example 2"
% % edithresh -i image:gull -o new_gull.viff
% % putimage -i new_gull.viff
%
%  "SEE ALSO"
% editcmap(1), editpseudo(1), editimage(1)
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kedithresh(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kedithresh(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'cmap_only', 0;'x', -1;'width', 512;'y', -1;'height', 512;'update', 1;'o', '__output'};
maxval={0,0,1000,1000,1000,1000,1,1};
minval={0,0,-1,-1,-1,-1,1,1};
istoggle=[0,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Toggle','Integer','Integer','Integer','Integer','Double','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'editcmap"  -thresh'],Inputs,narglist);
