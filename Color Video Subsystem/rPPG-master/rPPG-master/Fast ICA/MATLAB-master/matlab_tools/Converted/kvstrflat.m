%kvstrflat 'Generates a 3 by 3 Flat Structuring Element'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vstrflat.pane file
%
% Parameters: 
% OutputFile: o 'Output kernel ', required: 'output morphological kernel'
% Integer: s00 ' ', default: 1: 'position (-1, 1) of the structuring element.'
% Integer: s10 ' ', default: 1: 'position (0, 1) of the structuring element.'
% Integer: s20 ' ', default: 1: 'position (1, 1) of the structuring element.'
% Integer: s01 ' ', default: 1: 'position (-1, 0) of the structuring element.'
% Integer: s11 ' ', default: 1: 'position (0, 0) of the structuring element.'
% Integer: s21 ' ', default: 1: 'position (1, 0) of the structuring element.'
% Integer: s02 ' ', default: 1: 'position (-1, -1) of the structuring element.'
% Integer: s12 ' ', default: 1: 'position (0, -1) of the structuring element.'
% Integer: s22 ' ', default: 1: 'position (1, -1) of the structuring element.'
%
% Example: o = kvstrflat( {'o','';'s00',1;'s10',1;'s20',1;'s01',1;'s11',1;'s21',1;'s02',1;'s12',1;'s22',1})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vstrflat - Generates a 3 by 3 Flat Structuring Element
%
%  DESCRIPTION
% .I vsrtflat
% Creates a new \fBmorphological planar kernel" via keyboard entry.
% 
% The term \fBStructuring element" is more often used than 
% morphological kernel.
% 
% From a general scientific perspective, the word \fBMORPHOLOGY"
% refers to the study of form and structure.
% 
% The "morphological" approach is generally based upon the analysis 
% of an image in terms of some predetermined geometric 
% shape known as a structuring element ("or morphological
% kernel"). Essentially, the manner in which the structuring 
% element fits into the image is studied.
% 
% The morphological operations can be employed for many purposes, 
% including edge detection, segmentation, and enhancement of images.
% 
% The definition of a structuring element is very important, and 
% depending on the applications, users have to create the appropriate 
% kernel.
% 
% A \fBStructuring Element" can be described by :
% 
%  _ 
% A 3x3 matrix containing pixels with value 0 (background) or 1 (domain).
% 
%  _
% The origin is the central pixel in the 3x3 matrix.
% 
% The kernel is stored in a formed file by columns.
%
%  
%
%  EXAMPLES
% 
% vstrflat -o kernel -s00 0 -s10 1 -s20 0 -s01 1 -s11 1 -s21 1 -s02 0 -s12 1 -s22 0
% Creates a new planar kernel for morphological functions via keyboard entry.
%
%  "SEE ALSO"
% lvstrflat(3)
%
%  RESTRICTIONS 
% .I vstrflat
% accepts only 0 or 1 for kernel pixel values.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993-1997 Junior Barrera, Roberto Lotufo.  All rights reserved.
% 


function varargout = kvstrflat(varargin)
Inputs={};
if nargin ==0
  arglist={'',''};
elseif nargin ==1
  arglist=varargin{1};
else error('Usage: [out1,..] = kvstrflat(arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'o', '__output';'s00', 1;'s10', 1;'s20', 1;'s01', 1;'s11', 1;'s21', 1;'s02', 1;'s12', 1;'s22', 1};
maxval={0,1,1,1,1,1,1,1,1,1};
minval={0,0,0,0,0,0,0,0,0,0};
istoggle=[0,0,0,0,0,0,0,0,0,0];
was_set=istoggle * 0;
paramtype={'OutputFile','Integer','Integer','Integer','Integer','Integer','Integer','Integer','Integer','Integer'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vstrflat"  '],Inputs,narglist);
