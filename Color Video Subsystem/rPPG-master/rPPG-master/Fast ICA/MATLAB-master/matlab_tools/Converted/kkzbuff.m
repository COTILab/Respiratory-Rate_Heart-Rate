%kkzbuff 'generate the projection-view-related data '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kzbuff.pane file
%
% Parameters: 
% InputFile: i '3D Data', required: 'Input scene (gray or binary scene)'
% Double: alpha 'alpha', default: 0: 'View plane rotation angle around Z axis'
% Double: beta 'beta ', default: 0: 'View plane rotation angle around X axis'
% Double: cut_dist 'cut distance', default: 0: 'Distance between view plane and origin of the xyz space'
% Double: thres 'thres >=', default: 0: 'Threshold value for surface detection'
% Double: delta_t 'ray step', default: 1: 'Walking step during the ray casting'
% Integer: step 'preview sampling step', default: 1: 'The sampling period'
% OutputFile: o1 'Z-buffer', optional: 'Distance between view plane and object surface'
% OutputFile: o2 'Coordinates', optional: 'Coordinates at z-buffer distance (surface)'
% OutputFile: o3 'Voxel Values', optional: 'Voxel densities at z-buffer distance (surface)'
%
% Example: [o1, o2, o3] = kkzbuff(i, {'i','';'alpha',0;'beta',0;'cut_dist',0;'thres',0;'delta_t',1;'step',1;'o1','';'o2','';'o3',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kzbuff - Projection and Hidden Surface Removal using Ray Casting
%
%  DESCRIPTION
% Projection and Hidden Surface Removal using Ray Casting: z-buffer, surface 
% coordinates, voxel densities.
% 
% The "kzbuff" operator is able to compute three different optional 
% outputs at the detected object's surface: 1) z-buffer, 2) coordinates and 
% 3) voxel densities. 
% 
% These outputs have the same size w and h, given by the input 3D scene 
% diagonal and 
% are generated according to a
% projection view, using a ray casting algorithm with the 
% light source at the same position as the observer. 
% The ray casting algorithm starts from the view plane and for each pixel
% finds the first voxel on the ray direction,
% which belongs to the surface of the object in the 3D scene. 
% The z-buffer output is an image of type KFLOAT (w x h x 1 x 1 x 1) with the 
% z-buffer information (distance between the voxel at the object's surface and
% the view plane).
% The coordinate output is an image of type KINT (w x h x 1 x 1 x 3);
% the elements 
% correspond to X,Y and Z coordinates of the voxels at the surface.
% The voxel density output is an image (w x d x 1 x 1 x 1) of the same type 
% as the
% 3D scene (input volume), with the voxel densities at the object surface.
% When a ray does not intersect the object, the corresponding z-buffer value 
% is set to -(3D scene diagonal), the voxel coordinate is set to (-1,-1,-1) and
% the voxel density is set to 0 (background value).
% 
% The rays are expressed as parametric equations with walking step "delta_t" 
% (unit is voxel).
% The 3D scene voxels can be binary or gray. In the gray level case, a
% threshold value "thres" is used to segment the 3D object from the 3D scene, but
% in both cases this value must be given.
% 
% The rays are parallels among themselves and orthogonals to the view plane.
% The initial relative position between the view plane and the 3D scene is
% sketched below. The view plane can be rotated around the z axis by the
% angle "alpha" and rotated around the x axis by an angle "beta" following
% the right hand rule. Rotations are made firstly around x and then around z. 
% The view plane can also be translated in the 3D scene to make cuts.
% The translation value is the distance between the cutting
% plane and the origin of the xyz space (center of 3D scene) and is given by 
% "cut_dist". When the values are positive, the cutting plane is between the
% viewer and the center of the 3D scene.  With negative values, the
% cutting plane is behind the center of the 3D scene.
% 
% 
%     viewer and source of light
%     are on the same position
% 
%                                      | ray direction
%              |                       |
%          ____|________               V
%         /    |       / view plane
%        /     |______/____
%       /     /      /     u
%      /_____/______/
%           /  |    z
%         v  __|__/__
%           /  |    /|
%          /   |   / |
%         /_______/ -|------->
%         |      |  /        x
%         |  /   | /
%         |_/____|/ 3D Scene
%          /   |
%         /    |
%              V y
% 
% 
% 
% A preview feature is possible and it is given by "step", which
% determines the sampling period in the lines and columns of the view plane.
% 
% The POINT_SIZE attribute is copied from the input to the outputs.
%
%  
%
%  EXAMPLES
% kzbuff -i scene.viff -o1 zbuffer.viff -alpha 30 -beta 40 -cut_dist 10
% -delta_t 1.0 -thres 100
% 
% The input scene is represented by the scene.viff file. The view plane will be
% rotated by 40 degrees around the x axis and 30 degrees around the z axis, in
% that order, following the right hand rule. The view plane will be positioned 
% at 10 units in front of the center of the 3D scene. Each ray will be casted 
% from 
% the view plane by a walking step of 1 to find the first
% voxel with density greater than or equal to the threshold value 100. The
% z-buffer is built from the distance of the view plane to the first
% voxel found by the ray casting algorithm. Coordinate and voxel
% density output are not generated in this case.
%
%  "SEE ALSO"
% kshad, kisnorm, kvsnorm, ktextu, kvoxext
%
%  RESTRICTIONS 
% The input object can not have map, mask, time and location segments, as
% well as dimention e > 1.
% 
% In case of t > 1 in the input object, the operator will be applied to the time
% t=0 only.
% 
% None of the input and output objects are referenced, therefore some attributes
% may change, as the VALUE_POSITION, for example.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993, 1994, 1995 UNICAMP, R A Lotufo,  All rights reserved.
% 


function varargout = kkzbuff(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkzbuff(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'alpha', 0;'beta', 0;'cut_dist', 0;'thres', 0;'delta_t', 1;'step', 1;'o1', '__output';'o2', '__output';'o3', '__output'};
maxval={0,0,0,0,0,2,2,1,1,1};
minval={0,0,0,0,0,2,2,1,1,1};
istoggle=[0,0,0,1,0,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Double','Double','Double','Double','Double','Integer','OutputFile','OutputFile','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'kzbuff"  '],Inputs,narglist);
