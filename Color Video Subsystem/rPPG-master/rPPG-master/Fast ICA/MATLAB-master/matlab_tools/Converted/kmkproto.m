%kmkproto 'Program Name: Short description of program'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros mkproto.pane file
%
% Parameters: 
% InputFile: i 'Input File', optional: 'input file'
%
% Example: kmkproto(i, {'i',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% mkproto - Make prototypes for functions
%
%  DESCRIPTION
% 
% Mkproto takes a re-directed input from standard in of one C source code file,
% and produces as output (on the standard output stream) a list of function
% prototypes (a la ANSI) for the external functions defined in the
% given source files. This output, redirected to a file, is suitable
% for #include'ing in a C source file.
% 
% It can be executed as follows:
% 
% 	% mkproto {options} < file.c
% 
% or,
% 
% 	% mkproto {options} < file.c > file.h
% 
% The function definitions in the original source
% may be either "old-style" (in which case appropriate prototypes are
% generated for the functions) or "new-style" (in which the definition
% includes a prototype already).
% 
% A -n option causes the line number where each function was defined
% to be prepended to the prototype declaration as a comment.
% 
% A -s option causes prototypes to be generated for functions declard
% "static" as well as extern functions.
% 
% A -p option causes the prototypes emitted to be only readable by ANSI
% compilers. Normally, the prototypes are "macro-ized" so that compilers
% with __STDC__ not defined don't see them. 
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
% cc(1), lint(1)
%
%  RESTRICTIONS 
% 
% Mkproto is easily confused by complicated declarations, such as
%          int ((*signal)())() { ...
% 
% or
%          struct foo { int x, y; } foofunc() { ...
% 
% Float types are not properly promoted in old style definitions,
% i.e.
%          int test(f) float f; { ...
% 
% should (because of the default type conversion rules) have prototype
%          int test(double f);
% 
% rather than the incorrect
%          int test(float f);
% 
% generated by mkproto.
% 
% Some programs may need to be run through the preprocessor before
% being run through mkproto. The -n option is unlikely to work as desired
% on the output of a preprocessor.
% 
% Typedef'd types aren't correctly promoted, e.g. for
%         typedef schar char; int foo(x) schar x;...
% 
% mkproto incorrectly generates the prototype int foo(schar x) rather than
% the (correct) int foo(int x).
% 
% Functions named "inline" with no explicit type qualifiers are not
% recognized.
%
%  REFERENCES 
% 
% Original source from:
% 
% Eric R. Smith                     email:
% Dept. of Mathematics                    ersmith@uwovax.uwo.ca
% University of Western Ontario           ersmith@uwovax.bitnet
% London, Ont. Canada N6A 5B7
% ph: (519) 661-3638
% 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kmkproto(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kmkproto(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input'};
maxval={1};
minval={1};
istoggle=[1];
was_set=istoggle * 0;
paramtype={'InputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'mkproto"  '],Inputs,narglist);
