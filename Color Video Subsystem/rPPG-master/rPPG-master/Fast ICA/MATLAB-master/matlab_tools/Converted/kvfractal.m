%kvfractal 'Fractal Feature Extraction (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vfractal.pane file
%
% Parameters: 
% InputFile: i 'Input Image ', required: 'input image filename'
% Integer: r 'Region size ', default: 15: 'region size argument'
% Integer: w 'Initial window size ', default: 2: 'initial window size argument'
% Integer: s 'Step size ', default: 1: 'step size argument'
% OutputFile: o 'Output Image', required: 'output image filename'
%
% Example: o = kvfractal(i, {'i','';'r',15;'w',2;'s',1;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vfractal - Fractal Feature Extraction  (K1)
%
%  DESCRIPTION
% .I vfractal
% performs a fractal feature extraction of an image via calculation
% of the fractal dimension "D".  The fractal dimension is computed 
% based on a calculation of the Hurst coefficient within a selected
% window size or "fractal region" of the image.  The Hurst coefficient
% is a measure of the slope of the line relating the window size vs 
% average range of image intensity.  The Hurst coefficient is related 
% to the fractal dimension as follows,
% .DS
% 
%                              D = 3 - H
%     where,
%             D  -  is the resulting fractal dimension
%             H  -  is the computed Hurst coefficient
%             3  -  constant related to the Euclidean geometry
% .DE 
% 
% The fractal dimension operation is computed, using overlapping windows,
% over the entire image.  A range of window sizes up to one third of the 
% size of the fractal region are used to compute the fractal dimension.  
% The center pixel in each fractal region is updated based on the 
% Hurst coefficient and subsequent fractal dimension calculation for that
% region.  
% 
% The input image, which must be of data storage type FLOAT, corresponds 
% to the -i argument.  The output image, which corresponds to the -o 
% argument, is stored as data type FLOAT.  The resulting output image will 
% be a single band image, and will have a border consisting of pixels of 
% value 0, since the window operation does not calculate values for border 
% pixels.
% 
% The size of the window for the "fractal region" is specified by the -r 
% region size argument.  The region size argument cannot be an even number.
% This means that the region dimensions must be odd (ie. 15x15, 17x17, etc.),
% since the center pixel is replaced with the computed value of the window
% data.  The default region size is 15x15.
% 
% The initial size of the sliding window in the fractal region is specified
% by the -w initial sliding window size argument.  The size of the sliding
% window cannot be less than 2 and cannot exceed 2 minus the upper window
% size.  The upper window size is determined by the region size, and cannot
% exceed one-third of the region size.  The size of the lower window cannot
% exceed 2 minus the upper window size, because at least two points are
% needed to calculate the slope of the best fit line. 
% 
% The step size specifies the increment to use when incrementing the sliding
% window size from the initial size (-w argument) to the upper window size
% (determined from the region size).  The step size cannot exceed a value 
% that would prevent at least two points from being used to calculate the
% slope of the best fit line.  The step size is specified by the -s step
% size argument.
% 
% Each pixel in the image is updated with a computed value except the border
% pixels.  A 15x15 window will result in a border of seven pixels, a 17x17 
% window will result in a border of eight pixels, etc.
% 
% The resulting feature vector will contain one band of data, which contains
% the computed fractal dimension "D" of the image intensity data for the
% particular region size selected.  Note that different results may be 
% obtained by varying the region size and initial size of the sliding window.
% 
% Comments -
% To calculate the overall fractal dimension of an image, set the region
% size to be the same size as the image (Note: region size must be odd),
% and use an initial sliding window size about one-fourth to one-third of
% the region size.  This will result in one value for the fractal dimension
% of the image, which can be obtained from running kstats.
% 
% When running this algorithm on a large image using a wide range of sliding
% window sizes, it may be helpful to use a generous step size to speed up
% the processing of the image.  For example, if a 256 by 256 image is being
% processed with a region size of 65 and an initial sliding window size of 3,
% it may be helpful to select a step size of about 6.  The following window
% sizes would be used in the calculation of the Hurst coefficient (slope of
% best fit line):  window sizes --> 3  9  15  21
% 
% If finer resolution is needed, a smaller step size should be used at the
% expense of processing time.
% 
% To view the resulting fractal dimension image in 3-D, use xprism to
% plot the image as a surface plot.
% 
% The input image MUST be of data storage type FLOAT. 
% 
% The output image is of data storage type FLOAT.
%
%  
%
%  EXAMPLES
% vfractal -i input_image.xv -o output_image -r 65 -w 3 -s 6
% 
% the selected window size of the fractal region is 65 x 65, which will result
% in a border width of 32 pixels in the output image.  The initial starting size
% of the sliding window is 3 x 3, and will range in size up to one-third of the
% region size, or 21 x 21 in this case.  The step size is 6, which will result
% in window sizes of 3, 9, 15, and 21 to be used in the calculation of the Hurst
% coefficient.  Note that a tradeoff between resolution of the best fit line and
% processing time was made by using a step size of 6.
%
%  "SEE ALSO"
% vgfractal(1)
%
%  RESTRICTIONS 
% .I vfractal
% will only operate on images of data storage type FLOAT. 
% The output image is of data storage type FLOAT.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvfractal(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvfractal(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'r', 15;'w', 2;'s', 1;'o', '__output'};
maxval={0,2,2,2,0};
minval={0,2,2,2,0};
istoggle=[0,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','Integer','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vfractal"  '],Inputs,narglist);
