%kkfft 'Fast Fourier Transform (Forward and Inverse)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kfft.pane file
%
% Parameters: 
% InputFile: i 'Complex Input', required: 'complex input object'
% MultiChoice: scale 'Scaling Options:', default: 3: 'scale FFT by 1, 1/N or 1/sqrt(N)'
%    Choices are:
%   1: 'Unity scaling'
%   2: 'Scale output by 1/N per transform axis'
%   3: 'Scale output by 1/sqrt(N) per transform axis'
% OutputFile: o 'Complex Output', required: 'complex output object'
% Toggle: whole 'Whole Data Set', default: 0: 'compute FFT along all dimensions '
% Toggle: w 'Width ', default: 0: 'if set, FFT is taken along the width dimension'
% Toggle: h 'Height ', default: 0: 'if set, FFT is taken along the height dimension'
% Toggle: d 'Depth ', default: 0: 'if set, FFT is taken along the depth dimension'
% Toggle: t 'Time ', default: 0: 'if set, FFT is taken along the time dimension'
% Toggle: e 'Element', default: 0: 'if set, FFT is taken along the element dimension'
%
% Example: o = kkfft(i, {'i','';'scale',3;'o','';'whole',0;'w',0;'h',0;'d',0;'t',0;'e',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kfft - Fast Fourier Transform (Forward and Inverse)
%
%  DESCRIPTION
% "kfft" performs a multidimensional FFT on the input object specified by  
% \fBInput File". The dimensions along which the FFT is taken are specified
% using the -w,-h,-d,-t and -e flags. A 1D FFT is evaluated along each of the
% specified dimensions. For example, if the -w and -h flags are set for an
% image then the FFT is first taken along each width of the image and it is taken
% again for each height of the image resulting from the first FFT. This
% is equivalent to taking the 2D FFT of the image. Thus "kfft" can perform 
% up to a 5D FFT on the input object depending on the number of flags 
% set by the user. The size of each dimension specified must be a power of 
% 2 and greater than 1. The dimensions for which the FFT is not calculated can
% have any size. The FFT is evaluated for all the primitives
% of the specified dimension. For example, if the input object has size
% (w,h,d,t,e) and the -w flag is specified then the FFT is calculated for
% all h*d*t*e width primitives in the object. 
% 
% This program will compute either a forward or inverse FFT, depending on
% the direction requested with the -dir option.  A -dir value of 0 or FALSE
% will result in a forward FFT, and a -dir value of 1 or TRUE will result
% in an inverse FFT.  The default is a -dir value of 0 or FALSE (forward FFT).
% 
%  "Input File" 5
% The input object is assumed of type complex. However if the data type
% of the object is not complex, then it is assumed that this object  represents
% only the real part of the data.  The imaginary part of the complex pair is    
% assumed to be zero.
% 
%  "Centering" 5
% The program also has the option (-center) of shifting the FFT result so that 
% the DC component is at (W/2,H/2,D/2,T/2,E/2) instead of (0,0,0,0,0) for the 5-D
% case. This option is supplied because the center-shifted frequency domain
% representation is much easier to visualize and filter, particularly for image
% processing applications. For a forward FFT, the center-shifted option 
% multiplies the input data by (-1)**(w+h+d+t+e) where (w,h,d,t,e) is the 
% coordinate. For the inverse FFT case, the data is multiplied by 
% (-1)**(w+h+d+t+e) AFTER the FFT processing, accounting for the fact that the 
% input frequency domain data was center-shifted by the forward FFT. 
% 
% Note that you must keep track of how the transform was centered in the forward
% FFT in order to know how to de-center it during the inverse FFT. For example,
% if the forward FFT was centered, then you must also ask that the inverse FFT
% be centered or you'll end up with your output data being multiplied by an
% alternating +1 / -1 sequence. Likewise, a non-centered forward FFT must be
% followed by a non-centered inverse FFT or you will end up with data multiplied
% by an alternating +1 / -1 sequence. Look out for the possibility of
% hiding the +1 / -1 multiplication due to the use of the magnitude operator
% to inspect the results!
% 
%  "Output Scaling" 5
% The scaling factor can also be specified. The user can choose from no (unity)
% scaling (-scale 1), scaling by a factor of 1/N (-scale 2) per transform
% axis, or scaling by a
% factor of 1/sqrt(N) (-scale 3) per transform axis, where N is the dimension
% of the axis along which the FFT is being taken.
% 
% It is the responsibility of the user to make sure that the data going 
% through multiple FFT's remains properly scaled. Since scaling can be done
% on both the forward and inverse FFTs, the aggregate scale factor is the product
% of the scaling done during the forward and inverse processing steps.
% Fox example, if the forward FFT is along a single axis of length N and scaling
% of 1/sqrt(N) is selected, and the reverse FFT is along the same axis again with
% scaling of 1/sqrt(N), then the aggregate scale factor would be 
% (1/sqrt(n))*(1/sqrt(n)) or 1/N, which is the correct scaling for a combined
% set of forward and inverse operations.
% 
% In general, the aggregate scale factor after forward and inverse processing
% should be arranged to be 1/Ni per axis where Ni is the size of the i'th axis
% along which the transform is being taken. This means that for an NxM 2D
% data set, the combination of forward and inverse FFT scale factors should
% be arranged to be 1/(M*N). This can be done three ways; unity forward and
% 1/N inverse, or 1/N forward and unity inverse, or 1/sqrt(n) forward and
% 1/sqrt(n) inverse.
% 
%  "Output File" 5
% The output of the FFT is a set of complex numbers.
% The data type representation can be selected as single precision complex
% (COMPLEX) or double precision complex (DCOMPLEX), both of which
% are floating point formats.
%
%  
%
%  EXAMPLES
% .so $DATAMANIP/repos/shared/man/kfft/example
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% "kfft" cannot operate on objects that have either of the mask, location 
% or time segments in addition to the value segment.
% 
% The IEEE FFT used internally is limited to a maximum vector size of 32768
% data points. This means that no object dimension can be larger than this number.
% This restriction will be removed in a later release when the IEEE FFT is
% replaced. This FFT is currently used because it is trusted and fast, although
% that fact may be hidden by data services overhead.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kkfft(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkfft(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'scale', 3;'o', '__output';'whole', 0;'w', 0;'h', 0;'d', 0;'t', 0;'e', 0};
maxval={0,0,0,0,0,0,0,0,0};
minval={0,0,0,0,0,0,0,0,0};
istoggle=[0,0,0,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','MultiChoice','OutputFile','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'kfft"  '],Inputs,narglist);
