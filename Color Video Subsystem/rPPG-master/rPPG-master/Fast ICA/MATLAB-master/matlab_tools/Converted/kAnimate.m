%kAnimate 'Animate Object Menuform'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros Animate.pane file
%
% Parameters: 
% MultiChoice: animateDirection 'Direction:', default: 1: 'animation direction'
%    Choices are:
%   1: 'Stop'
%   2: '< '
%   3: '> '
%   4: '<<'
%   5: '>>'
% MultiChoice: animateControl 'Control:', default: 1: 'animation control'
%    Choices are:
%   1: 'Loop'
%   2: 'Single'
%   3: 'Autoreverse'
% InputFile: imageImagefile ' InputFile', required: 'input file'
%
% Example: kAnimate(imageImagefile, {'animateDirection',1;'animateControl',1;'imageImagefile',''})
%
% Khoros helpfile follows below:
% 
% .begin tagged
% .item "The Animate Visual Object"
% An animation visual object provides a mechanism with which a sequence of images 
% may be animated.  Image frames may be organized down depth, time, or elements.
% Attributes offer control over the speed with which the image frames are changed,
% and the direction of the animation. Animations may run in a single loop 
% (one pass through the frames), a continuous loop (continual forward passes 
% through the frames), or an autoreverse loop (continual passes forward through 
% the frames, first forwards, then backwards).
% 
% .item "Direction"
% This attribute provides control over the direction in which the images are 
% sequenced.  
% .begin enumerate
% .item
% "<<" causes the animation to sequence in a backward direction. 
% .item
% "< " advances a single frame in a backwards direction (frame N to N-1). 
% .item
% "Stop" causes the animation to stop. 
% .item
% "> " advances a single frame in a forward direction (from frame N to N+1). 
% .item
% ">>" causes the animation to sequence in a forward direction. 
% .end enumerate
% 
% .item "Control"
% The "Control" selection allows you to control how the sequencing is 
% performed when the animation is in motion.  Animation is considered 
% "in motion" when the animation direction is sequencing forwards or
% backwards, as initiated by use of the ">>" or "<<" on the "Direction" 
% toggle.  The animation may be performed once completely, repeated 
% indefinitely,  or performed in one direction then reversed and repeated 
% in the other direction.
% .begin enumerate
% .item 
% "Single" does a single complete sequence of the animation, in the current 
% animation direction,  and then stops.
% .item 
% "Loop" does a full sequence through the animation, in the current animation 
% direction.  As soon as the sequence is finished, it is started again, so that 
% the animation is put into a loop.  This procedure will repeat until the 
% animation is stopped.
% .item 
% "Autoreverse" does a single complete sequence of the animation, in the current
% animation direction, then reverses the direction and sequences back.  This 
% procedure will repeat until the animation is stopped.
% .end enumerate
% 
% .item "Update Time"
% This is the time interval, in seconds, which will elapse before the 
% animation display is updated with the next image in the sequence.
% 
% .item "InputFile"
% Allows you to specify the input file for the animation.
% .end tagged


function varargout = kAnimate(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kAnimate(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'animateDirection', 1;'animateControl', 1;'imageImagefile', '__input'};
maxval={0,0,0};
minval={0,0,0};
istoggle=[0,0,0];
was_set=istoggle * 0;
paramtype={'MultiChoice','MultiChoice','InputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'Animate" '],Inputs,narglist);
