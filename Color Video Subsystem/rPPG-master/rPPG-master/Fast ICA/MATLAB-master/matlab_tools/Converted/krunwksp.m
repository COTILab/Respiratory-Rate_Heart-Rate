%krunwksp 'Execute a saved cantata workspace, with or without GUI'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros runwksp.pane file
%
% Parameters: 
% String: args 'Encapsulated Workspace Arguments', default: ' ': 'Arguments to be passed to the encapsulated workspace'
% Toggle: hidden 'Hide Workspace', default: 0: 'hide workspace; just run it'
% Toggle: silent 'Suppress Echo', default: 0: 'Do not echo commands to tty'
% Toggle: showgui 'Display Workspace GUI', default: 0: 'whether the display workspace gui is initially shown'
% Toggle: report 'Checkpoint Reporting', default: 0: 'enable checkpoint/debug reporting'
% Toggle: rootwindow 'Run Application on RootWindow', default: 0: 'run application on root window'
% Integer: x 'X Window Placement', default: -1: 'x location of GUI'
% Integer: width 'Window Width ', default: 512: 'The window width'
% Integer: y 'Y Window Placement', default: -1: 'y location of GUI'
% Integer: height 'Window Height', default: 512: 'The window height'
% InputFile: wksp 'Workspace File', optional: 'Input workspace file to be run'
% String: tb 'Toolbox Name', default: ' ': 'the toolbox in which the encapsulated workspace'
% String: oname 'Object Name ', default: ' ': 'The encapsulated workspace object name'
%
% Example: krunwksp(wksp, {'args',' ';'hidden',0;'silent',0;'showgui',0;'report',0;'rootwindow',0;'x',-1;'width',512;'y',-1;'height',512;'wksp','';'tb',' ';'oname',' '})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% runwksp - Execute a saved cantata workspace, with or without GUI
%
%  DESCRIPTION
% 
% The "runwksp" program executes a visual program, or workspace,
% that was previously created with "cantata". The workspace to be run
% may be an encapsulated workspace (specify [-tb] and [-oname]) or simply
% a saved workspace file (specify [-i]).  You are expected to be familiar 
% with the concepts of saved workspaces, encapsulated workspace, and workspace
% GUI's before using "runwksp";  see the Visual Programming Manual or the 
% online documentation of "cantata" for details on these and related 
% subjects.
% 
% The [-hidden] argument may be used to suppress display of the visual program;
% it will cause "runwksp" to execute the visual program "invisibly". This
% will produce the same results as you would see if you displayed the visual 
% program and clicked on the "Run" button to run the network.  Operators will be 
% echoed to the tty as they are executed.  This is the mechanism that is used to 
% execute an encapsultated workspace from the command line.  IMPORTANT NOTE: 
% although the display of the visual program is suppressed when the [-hidden] 
% argument is used, you must still be on a workstation running X Windows in order 
% to execute "runwksp", as \fHrunskwp\fP is an X Windows based application.  
% 
% The [-args] argument is used to provide arguments to an encapsulated workspace.
% The arguments provided must be legal arguments to the encapsulated workspace,
% as defined by the author when the encapsulated workspace was created; note that 
% the syntax for an encapsulated workspace can be inspected by running the 
% encapsulated workspace with the [-U] argument.  All arguments must be in proper 
% syntax, and the argument string as a whole must be delineated with double 
% quotation marks.  For example, if an encapsulated workspace takes a string 
% argument [-str] and an integer argument [-n], the value provided for the 
% [-args] argument of "runwksp" might be of the form:
% 	-args "-str thisisatest -n 5" 
% Note that the [-args] argument is not applicable when the [-i] argument is 
% used to specify a saved workspace file; it only applies to encapsulated 
% workspaces.
% 
% The [-showgui] argument is used to indicate that the workspace GUI associated
% with the encapsulated workspace is to be is to be displayed.  When the workspace
% GUI has been displayed, you can specify the arguments to the encapsulated 
% workspace as desired using the GUI, and click on the "Run" button of the GUI
% in order to execute the workspace.  
% 
% The [-x], [-y], [-width], and [-height] arguments may be used to specify
% the (x,y) device coordinates at which the workspace will appear, as well as
% the width and the height of the workspace.  These arguments are, of course,
% only applicable when the [-hidden] option is "not" being used.  Note that 
% when x and y have values of -1, manual placement of the workspace window is 
% performed;  when specified as values between 0 and the screen dimensions, 
% the workspace window will pop up at the specified location.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = krunwksp(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = krunwksp(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'args', ' ';'hidden', 0;'silent', 0;'showgui', 0;'report', 0;'rootwindow', 0;'x', -1;'width', 512;'y', -1;'height', 512;'wksp', '__input';'tb', ' ';'oname', ' '};
maxval={0,0,0,0,0,0,1000,1000,1000,1000,1,0,0};
minval={0,0,0,0,0,0,-1,-1,-1,-1,1,0,0};
istoggle=[1,1,1,1,1,1,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'String','Toggle','Toggle','Toggle','Toggle','Toggle','Integer','Integer','Integer','Integer','InputFile','String','String'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'runwksp"  '],Inputs,narglist);
