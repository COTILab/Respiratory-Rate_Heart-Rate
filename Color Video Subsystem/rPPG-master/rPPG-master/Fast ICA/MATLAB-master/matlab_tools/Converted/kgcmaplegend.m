%kgcmaplegend 'Construct Geometry Representing a Color Legend'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros gcmaplegend.pane file
%
% Parameters: 
% InputFile: i 'Vis Colormap', required: 'input vis colormap'
% String: name 'Name ', default: 'color legend': 'color legend'
% MultiChoice: orient 'Legend Orientation', default: 1: 'legend orientation'
%    Choices are:
% Double: length 'Length ', default: 1: 'length of legend'
% Double: thickness 'Thickness ', default: 0.05: 'thickness of legend'
% Double: xpos 'X Position', default: -0.85: 'x position'
% Double: ypos 'Y Position', default: -0.5: 'y position'
% Integer: num_labels 'Number of Labels', default: 2: 'Number of subdivisions along color legend for text labels.'
% String: sprintf_format 'Sprintf Format ', default: '%g': 'C-style formatting string. No error checking is perfomed. Use %g for most stuff.'
% Double: text_offset 'Text offset', default: 0.1: 'Offset of text in either the horizontal or vertical dimension, depending upon the orientation of the legend.'
% String: title_string 'Title String', default: 'I am a title.': 'The text for the title.'
% Double: title_x_offset 'Title X-offset', default: 0: 'X-Offset of title relative to the origin of the legend.'
% Double: title_y_offset 'Title Y-offset', default: 0: 'Y-offset of title relative to legend origin.'
% OutputFile: o 'Output Geometry Object', required: 'output geometry object'
%
% Example: o = kgcmaplegend(i, {'i','';'name','color legend';'orient',1;'length',1;'thickness',0.05;'xpos',-0.85;'ypos',-0.5;'num_labels',2;'sprintf_format','%g';'text_offset',0.1;'title_string','I am a title.';'title_x_offset',0;'title_y_offset',0;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% gcmaplegend - Construct Geometry Representing a Color Legend
%
%  DESCRIPTION
% .I gcmaplegend 
% is used to contruct geometry representing a color legend showing the
% colors contained in a 
% .I visualization colormap.  
% The length and thickness of the
% legend can be controlled, along with its 2d position in space.  The
% legend can be oriented either vertically or horizontally.  An outline
% around the distinct colors in the legend may be optionally included.
% The colors in the legend can be reversed.  Optionally, text labels
% may be generated to indicate values associated with particular
% colors.  An optional legend title may be specified.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
% ggencmap
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996,1997 , The Regents of the University of California.  All rights reserved.
% 


function varargout = kgcmaplegend(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kgcmaplegend(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'name', 'color legend';'orient', 1;'length', 1;'thickness', 0.05;'xpos', -0.85;'ypos', -0.5;'num_labels', 2;'sprintf_format', '%g';'text_offset', 0.1;'title_string', 'I am a title.';'title_x_offset', 0;'title_y_offset', 0;'o', '__output'};
maxval={0,0,0,2,0.25,1,1,1,0,0,0,0,0,0};
minval={0,0,0,0,0,-1,-1,1,0,0,0,0,0,0};
istoggle=[0,1,0,1,1,1,1,1,1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','String','MultiChoice','Double','Double','Double','Double','Integer','String','Double','String','Double','Double','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'gcmaplegend"  '],Inputs,narglist);
