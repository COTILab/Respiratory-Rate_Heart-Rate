%kggridder2d 'Compute z=f(x,y) over a user-defined grid given scatter data.'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros ggridder2d.pane file
%
% Parameters: 
% InputFile: i 'Input Data Object', required: 'input data object'
% Integer: grid_size_x 'Output Grid X-samples ', default: 20: 'value indicating x-resolution of output grid'
% Integer: grid_size_y 'Output Grid Y-samples ', default: 20: 'value indicating y-resolution of output grid'
% OutputFile: o 'Output Data Object', required: 'output data object'
% Toggle: inverse_distance_method 'Inverse-distance method', default: 0: 'use inverse-distance method'
% Toggle: idsfft_method 'Fourier analysis', default: 0: 'use 2d fourier analysis flag'
% Toggle: compute_grid_min_max 'Compute grid min/max from input data.', default: 0: 'Compute output grid min/max from input location data'
% Toggle: user_grid_min_max 'User defined grid min/max.', default: 0: 'user defined grid min/max vertices, in 2D'
%
% Example: o = kggridder2d(i, {'i','';'grid_size_x',20;'grid_size_y',20;'o','';'inverse_distance_method',0;'idsfft_method',0;'compute_grid_min_max',0;'user_grid_min_max',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% ggridder2d - Compute z=f(x,y) over a user-defined grid given scatter data.
%
%  DESCRIPTION
% kgridder_2d is used to fit a surface through scatter data.  Input to this
% module consists of a set of points, and output consists of a 2D array of
% function values.  A choice of several numerical methods are provided,
% each yielding a possibly different surface.
% 
% At present, the methods available are as follows.
% 
% 
%  "Fourier Analysis (default)" 5
% The input data is assumed to be an sampled set of points from a function
% which can be reconstructed using 2D fourier analysis.  Given the input
% values, the frequency components of the estimated function are computed. 
% The values at each output grid point are computed using this function.
% 
% 
%  "Inverse Distance Method" 5
% At each output grid point, all points that lie within a user-defined search
% radius are averaged together using an inverse distance formula.  The user
% is provided with an exponent which is applied to the denomimator of
% this forumula.  Increasing the value of the exponent will tend to cause
% points farther away to have less influence.  Decreasing the value of the 
% exponent will tend to make the surface a bit smoother.
% 
% Common problems:
% 
% 
%  "Search Radius Too Small" 5
% The search radius must be large enough so as to have some overlap with
% adjacent output grid points, and large enough to include input data.  In
% areas of sparse input data, often the output grid will have it's value
% set to "UNDEFINED", as no input points are close enough to influence this
% grid point.  The two ways to work around this are to use a larger search
% radius (the radius is in the same space as the input data, by the way),
% or to use a different method which works better with sparse data, such
% as Fourier Analysis.
% 
% 
%  "Results of Fourier Analysis too Extreme"
% On occasion, this method will produce values which vary wildly from the
% input, resulting in surfaces which have marked peaks or valleys, seemingly
% going off into infinity.  This is produced by extrapolation into a region
% where there is no data, based upon a partial derivative computed at two
% data points close together.  The only way to work around this is to
% include more points in the surface computation, or to use a method
% which doesn't use partial derivatives, such as the Inverse Distance Method.
% 
% 
%  "COMING SOON: Bivariate Analysis" 5
% (Fall 1994)
% 
% The extents of the output grid, by default, are computed for you.  If
% this isn't acceptable, then set the min/max values for the grid
% yourself.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996,1997 , The Regents of the University of California.  All rights reserved.
% 


function varargout = kggridder2d(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kggridder2d(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'grid_size_x', 20;'grid_size_y', 20;'o', '__output';'inverse_distance_method', 0;'idsfft_method', 0;'compute_grid_min_max', 0;'user_grid_min_max', 0};
maxval={0,2,2,0,0,0,0,0};
minval={0,2,2,0,0,0,0,0};
istoggle=[0,1,1,0,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','Integer','OutputFile','Toggle','Toggle','Toggle','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'ggridder2d"  '],Inputs,narglist);
