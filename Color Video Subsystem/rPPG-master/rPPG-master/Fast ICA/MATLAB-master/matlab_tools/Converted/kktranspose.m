%kktranspose 'Transpose Data on Dimensions'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros ktranspose.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'input data object'
% OutputFile: o 'Output', required: 'resulting data object'
% Toggle: w ' ', default: 0: 'swap width and one other dimension'
% Toggle: h ' ', default: 0: 'swap height with one other dimension'
% Toggle: e ' ', default: 0: 'swap elements with one other dimension'
% Toggle: d ' ', default: 0: 'swap depth with one other dimension'
% Toggle: t ' ', default: 0: 'swap time with one other dimension'
%
% Example: o = kktranspose(i, {'i','';'o','';'w',0;'h',0;'e',0;'d',0;'t',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% ktranspose - Transpose Data across Dimensions
%
%  DESCRIPTION
% ktranspose will swap data across two dimensions.  Any of the polymorphic
% dimensions of WIDTH (W), HEIGHT (H), ELEMENTS (E), DEPTH (D), 
% and TIME (T), can be switched with another.  
% 
% \f(CW
% 
%                  'depth' planes of value data
%                ____/   ____       ____ 
%               +---+|  +---+|     +---+|  The value segment is a time
%     'height'--|   ||  |   || ... |   ||  series of volumes. 
%               +---+   +-|-+      +---+
%                 |       | 
%              'width'   each element in the value value 
%                        segment is a vector of size 
%                        'elements'.
% 
% 
% The dimensions which should be transposed are specified. 
% On the graphical user interface accessible via
% cantata, these flags are represented as a series of buttons, with one
% for each dimension.  On the command line, these flags are specified
% as a letter : w,h,d,t,e.   Only two flags should be specified. The
% dimensions indicated by these two flags will be transposed. For example, 
% 	
% 	ktranspose -i infile -o outfile -w -h
% 
% will cause the height dimension and the width dimension to be 
% switched. If the input file has width = 4, height = 2, 
% the output dimension will have width = 2, height = 4.
% 
% 
%  "Map Data"
% If the source object has map data, the map data cannot
% have depth, time, or elements dimensions of greater than
% one.  The map width and height dimensions can be any size.
% 
%  "Location & Time Data"
% If the source object has rectilinear or curvilinear
% location or time data, the orientation operator will fail.  If the
% source object has uniform location data, orientation will
% continue, but the location data will not be modified
% to reflect the reorientation.
% 
%  "Map Data"
% If the object has mask data, it will be transposed along with the value data.
% 
%  "Failure Modes"
% The transpose operator will fail if the source object does not contain
% value data, or if it contains rectilinear or curvilinear location or time
% data.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
% kaxis, korient
%
%  RESTRICTIONS 
% This program has not yet been updated to completely support the
% polymorphic data model.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kktranspose(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kktranspose(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'o', '__output';'w', 0;'h', 0;'e', 0;'d', 0;'t', 0};
maxval={0,0,0,0,0,0,0};
minval={0,0,0,0,0,0,0};
istoggle=[0,0,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile','Toggle','Toggle','Toggle','Toggle','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'ktranspose"  '],Inputs,narglist);
