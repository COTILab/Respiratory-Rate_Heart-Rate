%kkbitwise 'Dual Operand Bitwise Operations'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kbitwise.pane file
%
% Parameters: 
% InputFile: i1 'Input 1', required: 'first input data object'
% OutputFile: o 'Output', required: 'resulting output data object'
% InputFile: i2 'Input 2', optional: 'second input data object'
% Integer: real 'Constant ', default: 1: 'constant value'
% Toggle: and 'AND', default: 0: 'Bitwise AND: o = i1 & (i2 or val)'
% Toggle: ls 'Left Shift', default: 0: 'Bitwise Left Shift: o = i1 << by (i2 or val)'
% Toggle: or 'OR', default: 0: 'Bitwise OR: o = i1 | (i2 or val)'
% Toggle: rs 'Unsigned Right Shift', default: 0: 'Bitwise Right Shift: o = i1 >> by (i2 or val)'
% Toggle: xor 'XOR', default: 0: 'Bitwise XOR: o = i1 ^ (i2 or val)'
% Toggle: srs 'Signed Right Shift', default: 0: 'Bitwise Signed Right Shift by (i2 or val)'
% Toggle: nand 'NAND', default: 0: 'Bitwise NAND: o = (~i1) | (~(i2 or val))'
% Toggle: rr 'Right Rotate', default: 0: 'Bitwise Right Rotate by (i2 or val)'
% Toggle: nor 'NOR', default: 0: 'Bitwise NOR: o = (~i1) & (~(i2 or val))'
% Toggle: lr 'Left Rotate', default: 0: 'Bitwise Left Rotate by (i2 or val)'
% Toggle: andrev '1 AND (NOT 2)', default: 0: 'Bitwise AND Reverse: o = i1 & (~(i2 or val))'
% Toggle: andinv '(NOT 1) AND 2', default: 0: 'Bitwise AND Inverted: o = (~i1) & (i2 or val)'
% Toggle: orrev '1 OR (NOT 2)', default: 0: 'Bitwise OR Reverse: o = i1 | (~(i2 or val))'
% Toggle: orinv '(NOT 1) OR 2', default: 0: 'Bitwise OR Inverted: o = (~i1) | i2'
%
% Example: o = kkbitwise({i1, i2}, {'i1','';'o','';'i2','';'real',1;'and',0;'ls',0;'or',0;'rs',0;'xor',0;'srs',0;'nand',0;'rr',0;'nor',0;'lr',0;'andrev',0;'andinv',0;'orrev',0;'orinv',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kbitwise - Dual Operand Bitwise Operations
%
%  DESCRIPTION
% The bitwise operator, kbitwise, performs a the specified bitwise operation
% between each point in \fBInput 1" (i1) and each corresponding point in 
% \fBInput 2" (i2), if the second input is specified.  If Input 2 is not
% specified, the operation will be performed using the \fBConstant" value 
% (real).
% 
% Therefore, if kbitwise were called with two input objects:
% 	
% 	kbitwise -i1 image:ball -i2 image:moon -o out -and
% 
% then the following operation would be performed
% 	
% 	out = i1 & i2
% 
% Whereas if kbitwise were called with a single data object and a constant:
% 	
% 	kbitwise -i1 image:ball -real 10 -o out -and
% 
% then the following would be performed:
% 	
% 	o = i1 & 10
% 
% 
% The supported functions are:
% 	
% 	
% 	AND (and)                   o = i1 & (i2 or val)
% 	OR   (or)                   o = i1 | (i2 or val)
% 	Exclusive Or (xor)          o = i1 ^ (i2 or val)
% 	NAND (nand)                 o = (~i1) | (~(i2 or val))
% 	NOR  (nor)                  o = (~i1) & (~(i2 or val))
% 	AND Reverse  (andrev)       o = i1 & (~(i2 or val))
% 	AND Inverted (andinv)       o = (~i1) & (i2 or val)
% 	OR Reverse  (orrev)         o = i1 | (~(i2 or val))
% 	OR Inverted (orinv)         o = (~i1) | i2
% 	Unsigned Right Shift (rs)   o = i1 >> by (i2 or val)
% 	Unsigned Left  Shift (ls)   o = i1 << by (i2 or val)
% 	
% 
% 
%  "Data Type - Single Input" 5
% .cI $DATAMANIP/repos/shared/man/sections/value_type_1input
% 
%  "Data Type - Two Input Objects" 5
% .cI $DATAMANIP/repos/shared/man/sections/value_type_2input
% The bitwise operators will not operate on float or complex data types.
% 
%  "Map Data" 5
% The bitwise operations have not been written to be fully polymorphic yet.  
% They does not 
% check for map data, and will therefore always operate on the value data, 
% even if a map exists.  This will most likely corrupt indexing into the map.  
% In the case of a single input, it is recommended to use the "Copy to 
% Value" (kcptoval) segment operator to temporarily move the map data into 
% the value segment, run kbitwise on the data, then move it back to the 
% map with the "Copy from Value" (kcpfromval) operator.
% When operating with two input objects, where at least one of the objects
% contains map data, data should be mapped prior to running the bitwise
% operator.  The "Map Data" operator (kmapdata) can be used to perform
% the mapping operation.
% 
%  "Validity Mask - Single Input" 5
% .cI $DATAMANIP/repos/shared/man/sections/mask_1input
% 
%  "Validity Mask - Two Input Objects" 5
% Masking has not been implemented yet for the bitwise operators.  Therefore,
% only the mask from the first input object will be transferred to the output.
% 
%  "Input Objects of Different Sizes" 5
% .cI $DATAMANIP/repos/shared/man/sections/resize_2input
% The value used to pad the data when the input files are not the same size is
% zero.
% 
%  "Explicit Location and Time Data - Single Input" 5
% .cI $DATAMANIP/repos/shared/man/sections/loc_and_time_1input
% 
%  "Explicit Location and Time Data - Two Input Objects" 5
% The bitwise operations have not been extended to understand location and
% time data.  Therefore, only location and time data present in the first input 
% object will be transferred to the output.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% 
% THIS ROUTINE is still under development, and has not been modified to fully
% support the polymorphic data model.  See paragraphs above for discussions
% concerning the polymorphic data segments. 
% 
% All processing is currently performed as UNSIGNED long, so the operations
% may not work properly on negative values.
% 
% The bitwise operators will not operate on float or complex data types.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kkbitwise(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkbitwise(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i1', '__input';'o', '__output';'i2', '__input';'real', 1;'and', 0;'ls', 0;'or', 0;'rs', 0;'xor', 0;'srs', 0;'nand', 0;'rr', 0;'nor', 0;'lr', 0;'andrev', 0;'andinv', 0;'orrev', 0;'orinv', 0};
maxval={0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
minval={0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
istoggle=[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile','InputFile','Integer','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle','Toggle'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'kbitwise"  '],Inputs,narglist);
