%kvcltrans 'Convert Between Tristimulus Color Spaces'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vcltrans.pane file
%
% Parameters: 
% InputFile: i 'Input Image ', required: 'input image'
% Double: n 'Normalization Factor', default: 255: 'specifies normalization factor'
% MultiChoice: t 'Color space model: ', default: 1: 'lets user chose color space model'
%    Choices are:
%   1: 'ntscRGB'
%   2: 'genericRGB'
%   3: 'ntscCMY'
%   4: 'ntscYIQ'
%   5: 'cieXYZ'
%   6: 'cieUVW'
% OutputFile: o 'Output Image', required: 'output resulting image'
%
% Example: o = kvcltrans(i, {'i','';'n',255;'t',1;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vcltrans - Convert Between Tristimulus Color Spaces
%
%  DESCRIPTION
% .I vcltrans
% performs the linear
% transformations between YIQ, XYZ, CMY, UVW and RGB color spaces.
% These transformations were taken from
% Pratt (Digital Image Processing, 1978).
% The values in the transformation matrices are based on
% NTSC RGB standard phosphors, as Pratt
% describes. 
% 
% The following transformation matrices are used:
% 	
% 	
% 	RGBtoYIQ = { { 0.299,  0.587,  0.114},
% 	             { 0.596, -0.274, -0.322},
% 	             { 0.211, -0.523,  0.312} };
% 	
% 	RGBtoXYZ = { { 0.607,  0.174,  0.201},
% 	             { 0.299,  0.587,  0.114},
% 	             { 0.000,  0.066,  1.117} };
% 	
% 	RGBtoUVW = { { 0.405,  0.116,  0.133},
% 	             { 0.299,  0.587,  0.114},
% 	             { 0.145,  0.827,  0.627} };
% 	
% 	YIQtoRGB = { { 1.000,  0.956,  0.621},
% 	             { 1.000, -0.272, -0.647},
% 	             { 1.000, -1.106,  1.703} };
% 	
% 	YIQtoXYZ = { { 0.967,  0.318,  0.594},
% 	             { 1.000,  0.000,  0.000},
% 	             { 1.173, -1.238,  1.870} };
% 	
% 	YIQtoUVW = { { 0.653,  0.208,  0.403},
% 	             { 1.000,  0.000,  0.000},
% 	             { 1.599, -0.780,  0.623} };
% 	
% 	XYZtoRGB = { { 1.910, -0.533, -0.288},
% 	             {-0.985,  2.000, -0.028},
% 	             { 0.058, -0.118,  0.896} };
% 	
% 	XYZtoYIQ = { { 0.000,  1.000,  0.000},
% 	             { 1.407, -0.842, -0.451},
% 	             { 0.932,  1.189,  0.233} };
% 	
% 	XYZtoUVW = { { 0.667,  0.000,  0.000},
% 	             { 0.000,  1.000,  0.000},
% 	             {-0.500,  1.500,  0.500} };
% 	
% 	UVWtoRGB = { { 2.432,  0.332, -0.576},
% 	             {-1.519,  2.083, -0.057},
% 	             { 1.440, -2.823,  1.803} };
% 	
% 	UVWtoYIQ = { { 0.000,  1.000,  0.000},
% 	             { 1.403,  0.534, -0.907},
% 	             { 1.757, -1.898,  0.470} };
% 	
% 	UVWtoXYZ = { { 1.500,  0.000,  0.000},
% 	             { 0.000,  1.000,  0.000},
% 	             { 1.500, -3.000,  2.000} };
% 	
% 
% 
% 
% The input image must be of type FLOAT, and
% of color space model ntscYIQ, cieXYZ, ntscCMY, cieUVW, ntscRGB
% or genericRGB. If the image is not in float format, it will be converted
% automatically, if the conversion is an upward conversion.
% The input image will be normalized by the value specified by 
% the -n option. The default is 255. 
% 
% 
% When converting between the different color spaces,
% care must be taken in regards to the normalization 
% factor. If the image had been scaled by using 
% kscale, then the scale factor used in kscale
% should be the normalization factor used in this
% routine.  The resulting image should not be normalized by using knormal,
% if the inverse transformation is desired. The data will be corrupted.
% NOTE: The output values of some of the transformations will be negative, and
% some values will be greater than 1. If conversion to BYTE is desired, then
% a possible solution is:
% 
% 
%  1.
% use vbandspt3 to obtain 3 grey level images
% 
% 
%  2.
% use kadd to offset the image by the maximum negative value.
% The offset value will most likely be different for each of
% the three images.
% 
% 
%  3.
% use kstats to get the maximum pixel value in the image and
% divide that by the maximum desired pixel value. This gives the
% scale factor. (EX. 3.2/255 = scale factor).
% 
% 
%  4.
% now use kconvert to scale (NOT NORMALIZE) by the computed
% scale factor and convert to BYTE.
% 
% 
%  5.
% kinset can be used to create a multi-spectral image.
% 
% 
% The reverse of the steps above may be followed to obtain
% the original image (scale by the inverse of the scale factor).
% 
% 
% We really do not know what it means to manipulate this data
% as explained above, except to make it displayable?
% 
% 
% If converting from YIQ, UWV, or XYZ to CMY the routine
% first converts to RGB then converts to CMY because
% CMY = 1 - RGB.
%
%  
%
%  EXAMPLES
% vcltrans -i ball.YIQ.xv -o ball.RGB.xv -t 2 -n 255.0
% 
% This will convert the input image, which has a color space model of YIQ,
% to a color space model of genericRGB.  The normalization factor used
% is 255.
% 
% vcltrans -i ball.RGB.xv -o ball.UVW.xv -t 6
% 
% This will convert the input image, which has a color space model of RGB,
% to an image with a color space model of cieUVW.  The default normalization
% factor of 255 is used.
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% The input image must be of one of the color space models listed above.
% The data type of the input must be VFF_TYP_FLOAT.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvcltrans(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvcltrans(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'n', 255;'t', 1;'o', '__output'};
maxval={0,2,0,0};
minval={0,2,0,0};
istoggle=[0,1,0,0];
was_set=istoggle * 0;
paramtype={'InputFile','Double','MultiChoice','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vcltrans"  '],Inputs,narglist);
