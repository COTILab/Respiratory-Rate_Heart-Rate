%kvconvert 'Convert Data Storage Type (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vconvert.pane file
%
% Parameters: 
% InputFile: i 'Input Image ', required: 'input image'
% MultiChoice: t 'Output Data Type', default: 2: 'choose bit data type'
% String: t 'Bit (packed)', default: 'bit': 'choose integer data type'
% String: t 'Integer', default: 'int': 'choose double data type'
% String: t 'Double', default: 'double': 'choose byte data type'
% String: t 'Byte', default: 'byte': 'choose float data type'
% String: t 'Float', default: 'float': 'choose double data type'
% String: t 'Double Complex', default: 'dcomplex': 'choose short data type'
% String: t 'Short', default: 'short': 'choose complex data type'
% String: t 'Complex', default: 'complex': 'lets user choose output data type'
%    Choices are:
% OutputFile: o 'Output Image', required: 'resulting output image'
% Double: n 'Normalization Value', default: 255: 'specifies normalization value'
% Double: s 'Scale Factor ', default: 1: 'specifies scale factor'
%
% Example: o = kvconvert(i, {'i','';'t',2;'t','bit';'t','int';'t','double';'t','byte';'t','float';'t','dcomplex';'t','short';'t','complex';'o','';'n',255;'s',1})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vconvert - Convert Data Storage Type  (K1)
%
%  DESCRIPTION
% .I vconvert
% performs data storage
% type conversions from any VIFF type to any other, with the
% exception of the transform types.  Scaling or (mutually exclusive)
% normalization can be performed if requested.  The scaling and
% normalization options are important for controlling the loss of
% precision when converting from a higher data type to a
% lower data type.
% 
% Output data storage
% type BYTE is a special case. If scaling is requested, then the
% input image is scaled, and then clipped to the range [0..255] before
% output. If normalization is requested, the data is offset adjusted and scaled
% to map onto the range [0..255] before output.
% 
% Normalization for other output types simply scales the data so that
% the most positive data value is equal to the normalization target. No
% offset adjustment is performed. If the most positive value in the
% image is zero then a zero valued image of the desired data type 
% will be produced.
% 
% When converting from type BIT to type BYTE, the output values will be
% 0 or 255 depending on whether the bit corresponding to the input pixel
% is 0 or 1.  For conversions from BIT to any type other than
% BYTE, the output value receives either 0 or 1 depending on the input
% bit value.  This was done so that an BYTE image would be displayable
% immediately after conversion from type BIT.
% 
% Use of the -b option is important when trying to normalize a multiband
% or vector image. If -b false is used, then the largest value of any
% vector \fBcomponent\fR in the image is used to compute the normalization
% multiplier. If -b true is used, then a different normalization multiplier
% is used for each band, as dictated by the data in that band.
%
%  
%
%  EXAMPLES
% vconvert -i image:moon -s 3.14 -t float -o blah.xv
% 
% multiplies "image:moon" by pi then outputs it as a VFF_TYP_FLOAT image.
%
%  "SEE ALSO"
% kconvert, knormal
%
%  RESTRICTIONS 
% This routine was ported to the Retro toolbox only because other Retro operators
% needed the lvconvert library call.  Use the new kconvert or knormal programs
% instead of this program!
% 
% There needs to be a way to specify the conversion from a COMPLEX type to
% a non-COMPLEX type to be either the real part or the magnitude (the
% current version does the real part only).
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvconvert(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvconvert(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'t', 2;'t', 'bit';'t', 'int';'t', 'double';'t', 'byte';'t', 'float';'t', 'dcomplex';'t', 'short';'t', 'complex';'o', '__output';'n', 255;'s', 1};
maxval={0,0,0,0,0,0,0,0,0,0,0,2,0};
minval={0,0,0,0,0,0,0,0,0,0,0,2,0};
istoggle=[0,0,1,1,1,1,1,1,1,1,0,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','MultiChoice','String','String','String','String','String','String','String','String','OutputFile','Double','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vconvert"  '],Inputs,narglist);
