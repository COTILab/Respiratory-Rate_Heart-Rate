%kvcast 'Upconvert All Inputs to the Highest Input Data Type (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vcast.pane file
%
% Parameters: 
% InputFile: i1 'Input Image 1', required: 'input image 1'
% InputFile: i2 'Input Image 2', required: 'input image 2'
% InputFile: i3 'Input Image 3', optional: 'input image 3'
% InputFile: i4 'Input Image 4', optional: 'input image 4'
% InputFile: i5 'Input Image 5', optional: 'input image 5'
% MultiChoice: t 'Select Data Type (Auto Upcast if Not Selected)', default: 1: 'choose byte data type'
% String: t 'Byte', default: 'byte': 'choose integer data type'
% String: t 'Integer', default: 'int': 'choose complex data type'
% String: t 'Complex', default: 'complex': 'choose short data type'
% String: t 'Short', default: 'short': 'choose float data type'
% String: t 'Float', default: 'float': 'choose double data type'
% String: t 'Double', default: 'double': 'Select data type [default = Auto Upcast to Highest Input Data Type]'
%    Choices are:
% OutputFile: o1 'Output Image 1', required: 'output image 1'
% OutputFile: o2 'Output Image 2', required: 'output image 2'
% OutputFile: o3 'Output Image 3', optional: 'output image 3'
% OutputFile: o4 'Output Image 4', optional: 'output image 4'
% OutputFile: o5 'Output Image 5', optional: 'output image 5'
%
% Example: [o1, o2, o3, o4, o5] = kvcast({i1, i2, i3, i4, i5}, {'i1','';'i2','';'i3','';'i4','';'i5','';'t',1;'t','byte';'t','int';'t','complex';'t','short';'t','float';'t','double';'o1','';'o2','';'o3','';'o4','';'o5',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vcast - Upconvert All Inputs to the Highest Input Data Type  (K1)
%
%  DESCRIPTION
% .I vcast
% will upconvert or upcast each input image to the highest input image
% data type.  Optionally, the user may elect to upcast all images to 
% a specified data type, as long as it is a data type that is equal to
% or greater than the highest data type of the input images.  If the
% user tries to select a data type that is lower than the highest 
% data type of the input images, an error message will be produced
% indicating that down casting is not allowed.
% 
% There are no restrictions as to the input image data types.  The data
% types can range from BIT to DOUBLE.  The input images may contain any
% combination of sizes or number of data bands.  All map information from 
% each input image is transferred to the corresponding output image. 
% 
% Note that when converting from type BIT to BYTE, the output values
% will be 0 or 1.  This is different from the results one would obtain
% using the defaults with kconvert.  In trying to preserve the 
% integrity of the data, vcast scales the data by 1.
%
%  
%
%  EXAMPLES
% vcast -i1 image.bit -i2 image.float -o1 image1 -o2 image2
% 
% converts both input images to data type FLOAT.  The optional data
% type argument was not selected, so auto convert was used to cast
% both images to the highest data type of the input images (in this case
% FLOAT).
% 
% vcast -i1 image.bit -i2 image.byte -i3 image.short -o1 img1 -o2 img2 -o3 img3 -t float
% 
% converts each input image to data type FLOAT.  The optional data 
% type argument was used to upcast all input images to data type
% FLOAT.
%
%  "SEE ALSO"
% kconvert
%
%  RESTRICTIONS 
% .I vcast
% only scales the input data by 1, and will only upconvert the data.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvcast(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvcast(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i1', '__input';'i2', '__input';'i3', '__input';'i4', '__input';'i5', '__input';'t', 1;'t', 'byte';'t', 'int';'t', 'complex';'t', 'short';'t', 'float';'t', 'double';'o1', '__output';'o2', '__output';'o3', '__output';'o4', '__output';'o5', '__output'};
maxval={0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1};
minval={0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1};
istoggle=[0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','InputFile','InputFile','InputFile','MultiChoice','String','String','String','String','String','String','OutputFile','OutputFile','OutputFile','OutputFile','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=2; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vcast"  '],Inputs,narglist);
