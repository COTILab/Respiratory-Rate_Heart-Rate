%kputdata 'General Non-Interactive Data Display Functions'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros putdata.pane file
%
% Parameters: 
% InputFile: i 'Input File ', required: 'File containing data'
% InputFile: cmap 'Input Colormap ', optional: 'File containing alternate colormap'
% Integer: x 'X Placement', default: -1: 'X location for GUI autoplacement'
% Integer: width 'Window Width ', default: 512: 'Window width'
% InputFile: clip 'Input Clip Gate', optional: 'File containing clip mask'
% Integer: y 'Y Placement', default: -1: 'Y location for GUI autoplacement'
% Integer: height 'Window Height', default: 512: 'Window height'
% Double: update 'Update time', default: 2: 'How often to check input file for modification'
% Integer: xoffset 'Image X Offset', default: 0: 'Specifies the horizontal offset within the image display'
% Integer: yoffset 'Image Y Offset', default: 0: 'Specifies the vertical offset within the image display'
% Toggle: image 'Image Display', default: 0: 'Displays the image, given image data'
% String: redfn 'Define Map Function For Red ', default: 'M0': 'Provides an equation that specifies the red map column '
% String: greenfn 'Define Map Function For Green ', default: 'M1': 'Provides an equation that specifies the green map column '
% String: bluefn 'Define Map Function For Blue ', default: 'M2': 'Provides an equation that specifies the blue map column '
% Toggle: imageicon 'ImageIcon Display', default: 0: 'Displays an icon image, given image data'
% Integer: iconsize 'Image Icon Size', default: 100: 'Controls the size of the icon in pixels'
% Toggle: zoom 'Zoom Display', default: 0: 'Zooms in on image data'
% Integer: zoomx 'X Position ', default: 0: 'Specifies the x position where the zoom window is focused'
% Integer: zoomy 'X Position ', default: 0: 'Specifies the y position in the which where the zoom window is focused'
% Toggle: animate 'Animate Display', default: 0: 'Animates an image, given sequenced image data'
% Toggle: pixel 'Pixel Display', default: 0: 'Displays the value data of the object'
% Integer: valuewidth 'Width of Pixel Value Display ', default: 7: 'Specifies the number of pixel values along width'
% Integer: valueheight 'Height of Pixel Value Display', default: 9: 'Specifies the number of pixel values along height'
% Toggle: mapval 'Map Value Display', default: 0: 'Displays the map value data of the object'
% Integer: mapwidth 'Width of Map Display ', default: 7: 'Specifies the number of map values along width'
% Integer: mapheight 'Height of Map Display', default: 9: 'Specifies the number of map values along height'
% Toggle: palette 'Palette Display', default: 0: 'Displays the colormap of the object'
% Toggle: plot2d 'Plot2D Display', default: 0: 'Creates a 2D plot of the data'
% Toggle: plot3d 'Plot3D Display', default: 0: 'Creates a 3D plot of the data'
% Double: xrot3d 'Rotation About X ', default: 100: 'Specifies the rotation angle about the X axis'
% Double: zrot3d 'Rotation About Z ', default: 100: 'Specifies the rotation angle about the Z axis'
% Double: edist3d 'Eye Distance ', default: 0: 'Specifies the eye distance'
%
% Example: kputdata({i, cmap, clip}, {'i','';'cmap','';'x',-1;'width',512;'clip','';'y',-1;'height',512;'update',2;'xoffset',0;'yoffset',0;'image',0;'redfn','M0';'greenfn','M1';'bluefn','M2';'imageicon',0;'iconsize',100;'zoom',0;'zoomx',0;'zoomy',0;'animate',0;'pixel',0;'valuewidth',7;'valueheight',9;'mapval',0;'mapwidth',7;'mapheight',9;'palette',0;'plot2d',0;'plot3d',0;'xrot3d',100;'zrot3d',100;'edist3d',0})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% putdata - General Non-Interactive Data Display Functions
%
%  DESCRIPTION
% Putdata is a generic visualization program that can display data in a variety
% of ways.  Data may be displayed as an image [-image], as a grid of numbers 
% displaying the value data [-pixel], as a set of 3 grids displaying the map
% data [-mapval], as an icon [-imageicon], as an animated 
% sequence [-animate], as a palette of colors defined by the colormap [-palette], 
% as a zoom window [-zoom], as a 2D plot [-plot2d], or as a 3D plot [-plot3d]. 
% 
% IMPORTANT NOTE: when the [-plot2d] visualization type is used, set [-axis2d]
% to "true" (1) if you wish a 2D axis system to be displayed along with the 2D 
% plot.  Axes are not supported for 3D plots as of yet.
% 
% The method with which putdata displays the data is specified by the user;  
% however, it is expected that the method chosen to display the data will be 
% compatible with the contents of the data itself and the method used to create 
% it.  For example, signals do not work well displayed as images, and data 
% displayed as an animated sequence should have multiple frames.  
% 
% The input file containing the data being visualized is monitored by default;
% the file is checked every 2 seconds for change, and if it has been modified,
% the visualization display is updated accordingly.  The interval at which the
% input file is checked for modification may be specified using the [-update]
% argument.
% 
% An alternate input color map may be used to change the current color map 
% using the [-cmap] argument.  Color maps do not make sense with visualization
% types of mapval, palette, pixel, plot2d, and plot3d.
% 
% A clip mask may be used to dictate the portion of the data that is displayed
% as an image, imageicon, animation, or zoom window.  Clip masks do not make
% sense with visualization types of pixel, palette, plot2d, or plot3d.
% 
% By default, the visualization display will share its colormap will all
% other applications running at the same time; that is, it does not not use a
% .I private colormap,
% but rather makes use of the 
% .I default colormap.
% It is possible to specify that the visualization display allocate its
% own private colormap or "grab" all available colors for its own use.
% This is done using the [-priv] argument.  When [-priv] is specified,
% moving the mouse pointer into the display window will cause the display
% to have its private colormap installed; moving the pointer out of the
% display window will cause the private colormap to be de-installed.  This
% results in the "technoflashing" phenomenon characteristic of private
% colormap installation.
% 
% Color allocation can also be controlled and set to either 
% .I  Read Only
% or 
% .I Read Write
% using the [-alloc] argument.  When set to 
% .I read only,
% once a color cell has been allocated, it can have its color set only once;
% from then on, the color cell can be shared by multiple applications, but
% not changed.  If the visualization display requires the color displayed
% to change, it must re-allocate the color cell, forcing a re-display of
% data.  This can be an expensive procedure.  In contrast, after a 
% .I read/write
% color cell is allocated, it can have its color changed at any time
% without re-allocation; the data being displayed does not need to be 
% redisplayed, and the color update process is much more efficient.
% However, the colors used in the visualization display cannot be shared by
% other applications.
% 
% On creation, the visual display window may be placed manually (the default
% method), or placed automatically.  For automatic placement of the visual
% display window, specify the desired location in device (screen) coordinates,
% using the [-x] and [-y] arguments.  
% 
% While the visual display window should be created with a default size that 
% is appropriate to the type of visualization being used, a width and height for 
% the visual display window can be specified explicitly using the [-width] and 
% [-height] arguments.  Alternatively, you may allow the visual display window
% to size itself initially, and then use the window manager to interactively 
% modify its size as desired.  
% 
% NOTE: Interactive resizing IS supported for visualization types of pixel,
% mapval, palette, plot2d, and plot3d.  Interactive resizing is NOT supported YET
% for visualization types of image, imageicon, animate, or zoom.
% 
%
%  
%
%  EXAMPLES
% % putdata -i image:ball -image -xoffset 0 -yoffset 0 
% -complex 5 -normaltype 1 -normalmethod 1 -redcol 2 
% -greencol 2 -bluecol 3 -redfn M0 -greenfn M1 -bluefn M2
% % putdata -i image:lizard -imageicon -iconsize 75
% % putdata -i image:mandril -pixel -valuewidth 7 
% -valueheight 9 -showcolorvalue y
% % putdata -i sequence:bushes -animate -dir 5 
% -control 1 -speed 0.5
% % putdata -i clust:albq1 -mapval -mapwidth 7 -mapheight 9 
% -showcolormap y -displaypolicy 1
% % putdata -i image:moon -palette -palettetype 1
% % putdata -i plot2d:brain -plot2d -axis2d y -ptype2d 5 
% -ltype2d 1 -mtype2d 2 -pcolor2d green
% % putdata -i plot3d:flow -plot3d -ptype3d 22 -ltype3d 1 
% -mtype3d 3 -stype3d 1 -pcolor3d green -fcolor3d white 
% -xrot3d 100 -zrot3d 100 -edist3d 0
%
%  "SEE ALSO"
% putimage(1), puticon(1), putpixel(1), putanimate(1), putmapval(1),
% putpalette(1), putplot2(1), putplot3(1), putzoom(1), animate(1),
% editimage(1), xprism(1)
%
%  RESTRICTIONS 
%
%  REFERENCES 
% Putdata is covered in Chapter 6 of the Envision manual.
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kputdata(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kputdata(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'cmap', '__input';'x', -1;'width', 512;'clip', '__input';'y', -1;'height', 512;'update', 2;'xoffset', 0;'yoffset', 0;'image', 0;'redfn', 'M0';'greenfn', 'M1';'bluefn', 'M2';'imageicon', 0;'iconsize', 100;'zoom', 0;'zoomx', 0;'zoomy', 0;'animate', 0;'pixel', 0;'valuewidth', 7;'valueheight', 9;'mapval', 0;'mapwidth', 7;'mapheight', 9;'palette', 0;'plot2d', 0;'plot3d', 0;'xrot3d', 100;'zrot3d', 100;'edist3d', 0};
maxval={0,1,1000,1000,1,1000,1000,1,10000,10000,0,0,0,0,0,512,0,1,1,0,0,1,1,0,1,1,0,0,0,360,360,50};
minval={0,1,-1,-1,1,-1,-1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,-50};
istoggle=[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Integer','Integer','InputFile','Integer','Integer','Double','Integer','Integer','Toggle','String','String','String','Toggle','Integer','Toggle','Integer','Integer','Toggle','Toggle','Integer','Integer','Toggle','Integer','Integer','Toggle','Toggle','Toggle','Double','Double','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'putdata"  '],Inputs,narglist);
