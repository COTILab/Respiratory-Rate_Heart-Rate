%kvdilexpan 'Expansion by Dilation'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vdilexpan.pane file
%
% Parameters: 
% InputFile: i 'Input Image', required: 'input image'
% InputFile: str 'Struct Element', optional: 'Structuring Element'
% Integer: vs ' Vertical Scale Factor ', default: 2: 'expansion scale factor'
% Integer: hs ' Horizontal Scale Factor ', default: 2: 'expansion scale factor'
% Integer: voff 'Vertical Offset ', default: 0: 'expansion scale factor'
% Integer: hoff 'Horizontal Offset ', default: 0: 'expansion scale factor'
% OutputFile: o 'Output Image ', required: 'resulting output image'
%
% Example: o = kvdilexpan({i, str}, {'i','';'str','';'vs',2;'hs',2;'voff',0;'hoff',0;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vdilexpan - Expansion by Dilation
%
%  DESCRIPTION
% .I vdilexpan
% expand an input image in both directions.
% 
% Let the domain of the input image be
%            E = [0, 1, ..., m - 1] x [0, 1, ..., n - 1].
% Let vs and hs be two positive integer values representing, respectively, the vertical and horizontal scale factors.
% Let the domain of the output image be
%            vhE = [0, 2, ..., vs(m - 1)] x [0, 2, ..., hs(n - 1)].
% Let vo and ho be two non negative integer values less or equal than, respectively, vs and hs. vo and ho represent, respectively, the vertical and horizontal offsets.
% Let a be the (conditionally) structuring function from E to P(vhE)
% (the subsets of vhE) given by
%            a(y) = (A + (y + (vo, ho))) n vhE (y member of E)
% where n means "intersection" and where A is a subset of the 3 x 3
% square centered at the origim, called structuring element.
% The expansion of the input image Y is the dilation of Y by a, that is:
% expand of Y = U{a(y): y member Y}.
% 
% If A is the 2 x 2 square then the dilation expands the input image in
% the usual manner, that is by duplicating each original pixel four times
% (twice in both directions).
% If A is the 3 x 3 square then the expansion of an 8-connected subset
% appears without ambiguity on the screen as a connected subset (in the
% sense of the usual Euclidean topology). In this later case, we say that
% the expansion preserve the connectivity 8.
% 
% The input and output images must be of the same data type, and have 
% the same number of data bands. The output image column size is vs times
% the input image column size and the output image row size is hs times
% the input image row size.
%
%  
%
%  EXAMPLES
% 
% will do the expansion (dilation) of the input image "ball.xv" by the structuring element "b.str" and the resulting image will be "outimage.xv".
% The vertical scale factor is 2, the horizontal scale factor is 2, the
% vertical offset is 0 and the horizontal offset is 0.
% 
% vdilexpan -i ball.xv -vs 2 -hs 2 -voff 0 -hoff 0 -o outimage.xv
% 
% will do the expansion (dilation) of the input image "ball.xv" by the
% structuring element reduced to the singleton containing the origin and
% the resulting image will be "outimage.xv".  The vertical scale factor
% is 2, the horizontal scale factor is 2, the vertical offset is 0 and
% the horizontal offset is 0.
% This option can be used to realize an expansion without internal dilation.
% In this case a dilation (by a structuring element greater than the 3 x 3 square) or anything else (a median filter) can be used after the expansion.
%
%  "SEE ALSO"
% For a definition of conditionally translation invariant dilation see:
% G. Banon and J. Barrera, "Set operator decomposition and conditionally translation invariant elementary operators", Workshop on Mathematical Morphology and its Applications to Signal Processing II, Fontainebleau, France, 7-9 September, 1994.
% 
% For more details on Digital Topology see:
% G. Banon and J. Barrera, "Bases da Morfologia Matematica para Analise de Imagens
% binarias", IX Escola de Computacao, Recife, 1994.
% 
% related routines are: veroexpan, vdilshrin, veroshrin
%
%  RESTRICTIONS 
% .I vdilexpan
% can be defined for all data types supported by Khoros, but at the moment it has been implemented just for unsigned char types.
% The structuring elements are subsets of the 3 x 3 square centered at the origin.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993-1997 Junior Barrera, Roberto Lotufo.  All rights reserved.
% 


function varargout = kvdilexpan(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvdilexpan(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'str', '__input';'vs', 2;'hs', 2;'voff', 0;'hoff', 0;'o', '__output'};
maxval={0,1,0,0,0,0,0};
minval={0,1,0,0,0,0,0};
istoggle=[0,1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Integer','Integer','Integer','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vdilexpan"  '],Inputs,narglist);
