%kvfht 'Compute 2-D Fast Hadamard Transform (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vfht.pane file
%
% Parameters: 
% InputFile: i 'Input File ', required: 'input image (viff file)'
% OutputFile: o 'Output File', required: 'output image (viff file)'
%
% Example: o = kvfht(i, {'i','';'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vfht - Compute 2-D Fast Hadamard Transform  (K1)
%
%  DESCRIPTION
% .I vfht
% performs a 2-D Fast Hadamard Transform on an image.  The Hadamard
% Transform uses a series of pulses as its basis functions.  This program
% uses the successive doubling algorithm and the separability property
% to implement a Fast Transform.  The output coefficients are, by definition,
% in sequency order.
% The output data may be scaled by 1/N, or not scaled at all.  The default is to
% not scale the data at all.  The only difference between a forward and a
% reverse Hadamard Transform is the scaling factor, so this routine functions
% as both a forward and reverse transform provided that one of the transforms
% (forward OR reverse) is set to scale by 1/N and the other performs no scaling.
% 
% 
% The Following references were used in creating this program :
% 1.  "Digital Image Processing, Second Edition"
%     Rafael C. Gonzalez
%     Paul Wintz
%     Addison-Wesley Publishing Company, Reading Massachusetts, 1987
%     Ian AshDown
%
%  
%
%  EXAMPLES
% vfht -i input.image -o hadamard.domain.image
% 
% This command performs a fast Hadamard transform on the image contained in
% the viff file "input.image" and returns the output in another viff file
% called "hadamard.domain.image".
% 
% If your input image had dimensions 4 row by 4 columns, and the image
% had a constant value as shown below
%                  input image = { 1, 1, 1, 1,
%                                  1, 1, 1, 1,
%                                  1, 1, 1, 1,
%                                  1, 1, 1, 1 }
% The output would be this
%                  output image = { 1, 0, 0, 0,
%                                   0, 0, 0, 0,
%                                   0, 0, 0, 0,
%                                   0, 0, 0, 0 }
% Because the input image was simply the first of the Hadamard basis functions
% with magnitude = 1.
%
%  "SEE ALSO"
% dfht(1)
%
%  RESTRICTIONS 
% The input data type may be byte (VFF_TYP_1_BYTE), short (VFF_TYP_2_BYTE),
% int (VFF_TYP_4_BYTE) or float (VFF_TYP_FLOAT), but the output
% coefficients will always be float.  The dimensions of the
% input image must both be non-zero powers of two.  Images with maps 
% are not allowed.  The input viff file must contain only one image with
% a single band.  Data with explicit locations is not accepted.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvfht(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvfht(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'o', '__output'};
maxval={0,0};
minval={0,0};
istoggle=[0,0];
was_set=istoggle * 0;
paramtype={'InputFile','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vfht"  '],Inputs,narglist);
