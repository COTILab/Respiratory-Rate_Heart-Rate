%kvgcirc 'Create Image of a Filled Circle (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vgcirc.pane file
%
% Parameters: 
% InputFile: trigger 'Trigger Input', optional: 'trigger input'
% Integer: r 'Rows ', default: 512: 'Number of rows in output image'
% Integer: c 'Columns ', default: 512: 'Number of columns in output image'
% Double: d 'Diameter of circle (in pixels) ', default: 256: 'Diameter of circle (in pixels)'
% Double: x 'X coordinate of center of circle', default: 256: 'X coordinate of center of circle'
% Double: y 'Y coordinate of center of circle', default: 256: 'Y coordinate of center of circle'
% Double: b 'Background level', default: 0: 'Background level'
% Double: f 'Foreground level', default: 255: 'Foreground level'
% MultiChoice: t 'Output data type:', default: 1: 'choose Byte data storage type'
% String: not_used 'BYTE', default: 'byte': 'choose Float data storage type'
% String: not_used 'FLOAT', default: 'float': 'Selects data type of output image'
%    Choices are:
% OutputFile: o 'Output image', required: 'output image'
%
% Example: o = kvgcirc(trigger, {'trigger','';'r',512;'c',512;'d',256;'x',256;'y',256;'b',0;'f',255;'t',1;'not_used','byte';'not_used','float';'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vgcirc - Create Image of a Filled Circle  (K1)
%
%  DESCRIPTION
% "vgcirc"
% creates an image of a filled circle. The background intensity is set by the
% -b argument. The foreground or circle intensity is set by the -f argument.
% The circle can be placed anywhere, and is NOT required to lie
% completely within the image boundaries.
% 
% The position of the center of the circle and its diameter can all be
% specified as floating point numbers, allowing sub-pixel positioning of
% the circle.
% 
% The trigger input can be used to cause
% .I vgcirc
% to re-execute when used inside cantata. No image is read from this input.
%
%  
%
%  EXAMPLES
% vgcirc -r 32 -c 32 -b 3.5 -f 107.5 -x 32 -y 16 -d 32 -t float
% 
% Creates a 32x32 image of type FLOAT, with the background level at 3.5 and
% the foreground at 107.5. The circle lies in this case halfway off the image
% to the right.  The diameter of the circle is 32 pixels.
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% .I vgcirc
% will generate only BYTE or FLOAT images.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvgcirc(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvgcirc(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'trigger', '__input';'r', 512;'c', 512;'d', 256;'x', 256;'y', 256;'b', 0;'f', 255;'t', 1;'not_used', 'byte';'not_used', 'float';'o', '__output'};
maxval={1,2,2,1,0,0,0,0,0,0,0,0};
minval={1,2,2,1,0,0,0,0,0,0,0,0};
istoggle=[1,1,1,1,1,1,1,1,0,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','Integer','Double','Double','Double','Double','Double','MultiChoice','String','String','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vgcirc"  '],Inputs,narglist);
