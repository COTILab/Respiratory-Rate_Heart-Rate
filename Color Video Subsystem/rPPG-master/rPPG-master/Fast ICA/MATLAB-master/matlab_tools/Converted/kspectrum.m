%kspectrum 'Interactive Image Classification System'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros spectrum.pane file
%
% Parameters: 
% InputFile: i 'Input File ', optional: 'File containing input image'
% InputFile: l 'Input Legend ', optional: 'File containing input legend'
% InputFile: t 'Input Disp File', optional: 'File containing input display environment file'
% InputFile: p 'Input Pre Class', optional: 'File containing input predetermined classification file'
% Integer: x 'X placement', default: -1: 'X location for GUI autoplacement'
% Integer: y 'Y placement', default: -1: 'Y location for GUI autoplacement'
% Double: update 'Update time', default: 1: 'How often to check input file for modification'
%
% Example: kspectrum({i, l, t, p}, {'i','';'l','';'t','';'p','';'x',-1;'y',-1;'update',1})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% spectrum - Interactive Image Classification System
%
%  DESCRIPTION
% Spectrum is an interactive signal/image classification system.
% It aids the user in classifying image data.  An image may be displayed,
% and then pixels in the image assigned to classes by holding the mouse button
% down and moving the pointer over the desired pixel in the image ("painting").
% For identification, classes are given a name and an unique color.   A class
% may contain as many pixels as desired; pixels may be moved from one class to
% another.  When the classification procedure is complete, the image can be
% written out along with a legend file for later use.
% 
% A "Spectral Response Curve" provides a graph giving information about the map
% data (feature data) associated with a cluster.  The "Legend Control" feature
% is used to modify the legend of classes;  among other things, you may assign
% a color to a class, list the clusters contained in the class, empty a class of
% clusters, transfer an entire class into another one, create a "catch-all"
% class of remaining unclassified clusters, and hide selected classes
% from view in order to examine the image without their
% interference.  A "Zoom" capability allows you to zoom in on the image;
% when the Update Mode is set to Button Press, clusters may be assigned to a
% class by "painting" on the zoom window rather than in the image.
% 
% Spectrum was specifically designed for images that have been pre-clustered,
% and therefore have additional information associated with them, this info
% being stored in the map data.  This special info in the map data will
% include N rows of cluster centers (mean vectors), where each column of the info
% is associated with a special feature of interest that was extracted
% during the previously-used clustering algorithm.  If you do NOT have
% pre-clustered data, spectrum can still be used to interactively classify the
% pixels in the image; however, if you do have pre-clustered images, there are
% additional features of spectrum that you may take advantage of:
% - display of different map columns as Red, Green, or Blue.
% - display of functions of map columns as Red, Green, or Blue
% (note: not implemented as of Khoros 2.0 Beta).
% - a 2D scatter plot where one map column provides the X coordinates, and another
% map column provides the Y coordinates;  unassigned cluster numbers appear in
% white, while assigned cluster numbers appear in the same color as was specified
% for their class in the legend.
% - the same 2D scatter plot as above, but with specified functions of map columns
% providing the X and Y coordinates.
% 
% Please see the manual section on I/O if you have additional information 
% associated with the input image provided by a clustering algorithm;  this 
% section details the input format expected by spectrum for such information.  
% In addition, this section also details the ascii Legend File that is used with 
% "spectrum".
% 
% "Spectrum" is covered in detail in Chapter 8 of the Envision Manual; the
% information given there will not be repeated here, so you are referred to that 
% document.
%
%  
%
%  EXAMPLES
% % spectrum -i albq2.viff -l albq2.lgd
%
%  "SEE ALSO"
% Spectrum is covered in Chapter 8 of the Envision Manual.
%
%  RESTRICTIONS 
%
%  REFERENCES 
% Spectrum is covered in Chapter 8 of the Envision Manual.
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kspectrum(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kspectrum(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'l', '__input';'t', '__input';'p', '__input';'x', -1;'y', -1;'update', 1};
maxval={1,1,1,1,1000,1000,1};
minval={1,1,1,1,-1,-1,1};
istoggle=[1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','InputFile','InputFile','Integer','Integer','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'spectrum"  '],Inputs,narglist);
