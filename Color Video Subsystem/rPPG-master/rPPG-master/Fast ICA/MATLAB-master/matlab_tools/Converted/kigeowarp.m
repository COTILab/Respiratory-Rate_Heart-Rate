%kigeowarp 'Perform Direct Bilinear Geometric Warping'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros igeowarp.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'Input data object'
% Toggle: planes 'Process by planes', default: 0: 'Process data by full planes instead of small prisms'
% OutputFile: o 'Output', required: 'Output data object'
% InputFile: wcoeffs 'W warp coeffs object', optional: 'W warp function coeffs object'
% InputFile: hcoeffs 'H warp coeffs object', optional: 'H warp function coeffs object'
%
% Example: o = kigeowarp({i, wcoeffs, hcoeffs}, {'i','';'planes',0;'o','';'wcoeffs','';'hcoeffs',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% igeowarp - Perform Direct Bilinear Geometric Warping
%
%  DESCRIPTION
% .I igeowarp
% is used to apply a direct bilinear warping to an image. In this mode, the
% bilinear mapping equations give the mapping of output data coordinates to
% input data coordinates. A given output data coordinate is operated on by the
% mapping functions to give the input data coordinate. The value of the input
% data coordinate is interpolated using bilinear interpolation, and the resulting
% value is assigned to the output data coordinate.
% 
% All warping is assumed to occur only in the WxH plane.
% If warping in a different plane is desired, it is necessary to use the kaxis
% program to reorient the data such that the desired plane is the WxH plane before
% applying igeowarp. This limitation is due to computational complexity and
% performance issues, particularly when dealing with large data sets.
% 
% The mapping functions used by igeowarp are:
% 
% 
%             f(w,h) = output image
% 
%             g(w',h') = input image coordinate
% 
%             w' = a00 + a01*w + a10*h +a11*w*h
%             h' = b00 + b01*w + b10*h +b11*w*h
% 
% 
% Note that in general, w' and h' are not integers for a given integer pair
% w and h. The
% data value at g(w',h') is obtained by bilinear interpolation of the four
% nearest neighbors to coordinate (w',h').
% 
% The mapping is called direct because it directly gives the location in the
% input data that corresponds to a given location in the output data. The 
% opposite case gives the location in the output data that corresponds to a
% given input data location; this requires much trickier and computationally
% expensive interpolation methods to obtain good results.
% 
% The input parameters a00, a01, a10, a11, b00, b01, b10, b11 are exactly as
% specified in the mapping functions above. These parameters can also be supplied
% in the form of object value data where the data is assumed to be organized with
% the parameters a00, a01, a10, and a11 present in that storage order for the
% W coefficients and likewise for the H coefficients.
% 
% If the input object has a mask, a new mask will be computed for the output
% object indicating which data points contain reliable data. 
% 
% If the input object has a map, the data is pulled through the map prior to
% rotation, and the output object will have no map.
% 
% The -planes flag is used to change the way the data is accessed for processing.
% If the data set is small enough that individual planes of data (including the
% E data) parallel to the WxH plane will fit in memory, then use of the -planes 
% flag will permit processing to happen in a plane-by-plane basis; this can
% occur with efficiency and speed. Otherwise,
% processing will occur in prisms down the D axis, which is much slower but will
% work on data sets of any size. If you have lots of memory, you may be able to
% get away with using -planes even for quite large data sets, say around 2Kx2K
% or more points per plane.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
% irotate(1)
%
%  RESTRICTIONS 
% 
% For this initial release, the E dimension data is "not\fR handled
% correctly. Data in WxHxD "is\fR handled correctly. This deficiency
% will be corrected in the next version of
% .I igeowarp.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kigeowarp(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kigeowarp(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'planes', 0;'o', '__output';'wcoeffs', '__input';'hcoeffs', '__input'};
maxval={0,0,0,1,1};
minval={0,0,0,1,1};
istoggle=[0,1,0,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Toggle','OutputFile','InputFile','InputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'igeowarp"  '],Inputs,narglist);
