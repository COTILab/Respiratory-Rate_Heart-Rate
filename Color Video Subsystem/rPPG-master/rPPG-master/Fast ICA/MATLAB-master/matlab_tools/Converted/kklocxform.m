%kklocxform 'Rotate, Translate, and Scale Location Data'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros klocxform.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'the input object to be processed'
% Double: xrot ' X ', default: 0: 'rotate around x axis'
% Double: yrot ' Y ', default: 0: 'rotate around y axis'
% Double: zrot ' Z ', default: 0: 'rotate around z axis'
% Toggle: fx 'Flip X', default: 0: 'flip x coordinates'
% Double: xtrans ' X ', default: 0: 'translate in x direction'
% Toggle: fy 'Flip Y', default: 0: 'flip y coordinates'
% Double: ytrans ' Y ', default: 0: 'translate in y direction'
% Toggle: fz 'Flip Z', default: 0: 'flip z coordinates'
% Double: ztrans ' Z ', default: 0: 'translate in z direction'
% OutputFile: o 'Output', required: 'the output object'
% Double: scale ' XYZ ', default: 1: 'orthogonal scale factor'
% Double: xscale ' X ', default: 1: 'scale x coordinates'
% Double: yscale ' Y ', default: 1: 'scale y coordinates'
% Double: zscale ' Z ', default: 1: 'scale z coordinates'
%
% Example: o = kklocxform(i, {'i','';'xrot',0;'yrot',0;'zrot',0;'fx',0;'xtrans',0;'fy',0;'ytrans',0;'fz',0;'ztrans',0;'o','';'scale',1;'xscale',1;'yscale',1;'zscale',1})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% klocxform - Rotate, Translate, and Scale Location Data
%
%  DESCRIPTION
% This routine performs a homogeneous coordinate
% transformation on the location data in the source
% object, and saves the transformed location data into
% the destination object.
% 
% The source object must have location data, and the
% destination object must not have location data for
% this routine to function properly.  This routine will
% create location data of the proper grid type in the
% destination.
% 
% The coordinate transformation can be specfied by nine
% parameters which specify an x-y-z rotation, an x-y-z
% translation, and an x-y-z scaling.  The rotations are
% all performed with respect to the (0,0,0) origin.  A
% scaling matrix, a translation matrix, and three
% rotation matrices are constructed from these
% specified parameters and composited into a single
% transformation matrix in the following order :
% 
%    [1] Scaling
%    [2] X Rotation
%    [3] Y Rotation
%    [4] Z Rotation
%    [5] Translation
% 
% A value of 1.0 should be used for any scaling
% parameters where no scaling is desired.  A value of
% 0.0 should be used for any rotation parameters where
% no rotation is desired or for any translation
% parameters where no translation is desired.
% 
% The location points are interpreted to be in
% three-space for the transformations.  Explicit
% location data located in dimensions higher than three
% will be lost during the transformation.  The
% transformation will be performed using the datatype
% KFLOAT.
% 
% In general, the grid type of the source object will
% be preserved in the destination object.  For example,
% uniform location data, when transformed and stored in
% the destination object, will still be uniform
% location data.  The exception to this rule is
% rectilinear data, which must be converted to
% curvilinear data in the event of a rotation.  In this
% case the destination location data will be stored as
% explicit curvilinear data points.
% 
% Reference : Foley & VanDam "Computer Graphics :
% Principles and Practice", Second Edition, 1990,
% Chapter 5.
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kklocxform(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kklocxform(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'xrot', 0;'yrot', 0;'zrot', 0;'fx', 0;'xtrans', 0;'fy', 0;'ytrans', 0;'fz', 0;'ztrans', 0;'o', '__output';'scale', 1;'xscale', 1;'yscale', 1;'zscale', 1};
maxval={0,360,360,360,0,0,0,0,0,0,0,2,2,2,2};
minval={0,-360,-360,-360,0,0,0,0,0,0,0,2,2,2,2};
istoggle=[0,1,1,1,1,1,1,1,1,1,0,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','Double','Double','Double','Toggle','Double','Toggle','Double','Toggle','Double','OutputFile','Double','Double','Double','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'klocxform"  '],Inputs,narglist);
