%kvgfractal 'Create Fractal Image with Specified Fractal Dimension (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vgfractal.pane file
%
% Parameters: 
% InputFile: trigger 'Trigger Input', optional: 'trigger input'
% Integer: r 'Number of recursions', default: 6: 'Number of recursions'
% Double: h 'Hurst coefficient ', default: 0.5: 'Hurst coefficient'
% Double: d 'Standard deviation ', default: 1: 'Standard deviation'
% Integer: s 'Seed ', default: 0: 'Seed'
% OutputFile: o 'Output Image', required: 'Output image filename'
%
% Example: o = kvgfractal(trigger, {'trigger','';'r',6;'h',0.5;'d',1;'s',0;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vgfractal - Create Fractal Image with Specified Fractal Dimension  (K1)
%
%  DESCRIPTION
% .I vgfractal
% creates a fractal image with a desired fractal dimension.  A fractal
% image is created using the midpoint displacement algorithm, which uses
% a recursive generation technique.  Numerous types of fractal images 
% may be created by varying the input parameters. 
% 
% The output image, which corresponds to the -o argument, is stored as 
% data type FLOAT, and will be a single band image.  The size of the 
% resulting image will be determined by the maximum number of recursions.
% That is, the resulting image will be square, with dimensions 
% (2^recursions +1) by (2^recursions +1).  
% 
% The input parameters include:  
% maximum number of recursions, desired hurst coefficient, standard 
% deviation of random numbers, seed, coastlines, and random additions.
% Descriptions on the use of these parameters follow.
% 
% The maximum number of recursions (iterations) is specified by the -r 
% recursive iteration argument.  The recursive iteration argument must be
% an integer ranging from 2 to 10.  The size of the image will be a 
% power of two of the recursive iteration argument.  That is, it will create
% an image with sizes ranging from (5 by 5) to (1025 by 1025).  The default 
% number of recursions is 6, which will result in an image of size 65 by 65 
% pixels.
% 
% The hurst coefficient of the generated image may be altered with the -h
% argument.  This allows the user to change the fractal dimension of the
% generated image.  Since the hurst coefficient is a measure of the slope
% of window size vs range in pixel values, the valid range for the hurst
% coefficient is  0 < H < 1.
% 
% The fractal dimension is calculated from the hurst coefficient as follows:
% 
% 
%                          D = 3 - H
%     where,
%              D is the fractal dimension
%              H is the hurst coefficient.
% 
% 
% The parameter 3 reflects the 3-dimensional Euclidean geometry of the
% system (ie. X, Y, and Z or pixel value).  
% 
% The standard deviation of the randomly generated numbers used to create
% the fractal image may be altered using the -s argument.  Increasing the
% standard deviation will permit a wider range of values to be generated 
% by the random number generator.  This will have the same effect as 
% scaling the values that are generated. 
% 
% A seed may be entered to allow the same image to be generated, or the
% system time may be used to set the seed (default).
% 
% The coastline argument (-c) can be toggled on (default is off), which 
% will effectively generate a "coastline" by setting all generated values
% that fall below zero to be equal to zero.  This creates the effect of a
% body of water running up against a landform, or a "coastline".
% 
% The random additions argument (-m) can be toggled on, which will allow
% random elements to be added to each point, whereas with random additions
% turned off (default), random elements are added only to the new midpoints
% generated in each stage. 
% 
% Note that in order to display the image as a three dimensional relief
% plot, the data can be plotted in xprism.
% 
% Theory -
% The midpoint displacement algorithm constructs the image using a recursive
% generation technique.  This method works with square lattices of points or
% pixels.  Given a resolution (w) of such a lattice or grid, another square
% grid is obtained with a resolution of w/sqrt(2) by adding the midpoints
% of all squares.  The orientation of the new lattice is rotated by 45 
% degrees, and adding the midpoints of all squares yields the next lattice
% with a resolution of w/2 and the same orientation as the first.  This is
% illustrated as follows:
%  
% \f(CW
% 
%       o   x   o            o   o   o           o x o x o
%                              x   x             x o x o x
%       x   o   x    ---->   o   o   o   ---->   o x o x o
%                              x   x             x o x o x
%       o   x   o            o   o   o           o x o x o
% 
%       where,      o = old points
%                   x = new points
% 
% "
% 
% 
% The trigger input can be used to cause
% .I vgfractal
% to re-execute when used inside cantata. No image is read from this input.
%
%  
%
%  EXAMPLES
% vgfractal -o output_image.xv -r 5 -h 0.7 -d 2.0 -s 1359 -m 1
% 
% the selected number of recursions is 5 (2^5 +1 or a 33 x 33 image).
% The hurst coefficient selected is 0.7, which results in an image with a
% fractal dimension of 2.3.  The standard deviation is 2.0 (slightly
% wider range of values generated).  The seed for the random number
% generator is entered as 1359.  The random additions flag is toggled on.
%
%  "SEE ALSO"
% vfractal(1)
%
%  RESTRICTIONS 
% 
% The resulting output image will be of type FLOAT.
%
%  REFERENCES 
% vgfractal uses the Midpoint Displacement Algorithm;  Benoit Mandelbrot
% discusses it in "The Fractal Geometry of Nature", W.H. Freeman,  1983,
% pp. 43b, 233, and 263.
% 
% For implementation details,  see H.-O. Peitgen and D. Saupe,  The Science
% of Fractal Images,  Springer-Verlag,  1988.
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvgfractal(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvgfractal(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'trigger', '__input';'r', 6;'h', 0.5;'d', 1;'s', 0;'o', '__output'};
maxval={1,10,1,2,1,0};
minval={1,2,0,2,1,0};
istoggle=[1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','Double','Double','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vgfractal"  '],Inputs,narglist);
