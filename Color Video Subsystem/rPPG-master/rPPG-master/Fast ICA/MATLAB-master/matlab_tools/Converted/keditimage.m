%keditimage 'Interactive Image Display and Manipulation'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros editimage.pane file
%
% Parameters: 
% InputFile: i 'Input File', optional: 'File containing image'
% InputFile: cmap 'Input Colormap ', optional: 'File containing alternate colormap file'
% InputFile: clip 'Input Clip Gate', optional: 'File containing clip mask'
% Integer: x 'X placement', default: -1: 'X location for GUI autoplacement'
% Integer: y 'Y placement', default: -1: 'Y location for GUI autoplacement'
% Double: update 'Update time', default: 1: 'How often to check input file for modification'
%
% Example: keditimage({i, cmap, clip}, {'i','';'cmap','';'clip','';'x',-1;'y',-1;'update',1})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% editimage - Interactive Image Display and Manipulation
%
%  DESCRIPTION
% "Editimage" is an interactive image display and manipulation tool.
% The features provided by "editimage" include:
% - Transparent support of a variety of input files
% - Use of clip masks
% - Capture of images from the screen
% - An input file history list
% - For multiband images, control over which band is displayed
% - Normalization of colormaps
% - Control over which columns of the map data are displayed as red, green, and blue
% - Application of functions to the map data values to produce new colormaps
% - Interactive editing of the image file comment
% - Application of autocolor procedures and colormap operations
% - Regular and irregular region of interest extraction
% - Creation of new data sets as defined by an interactively specified function
% - Zooming on the displayed image
% - Display of pixel values surrounding the location of the pointer in the image
% - Display of map data values surrounding the location of the pointer in the image
% - Colormap manipulation via a pseudo-coloring mechanism
% - Pixel clipping and pixel thresholding on the image
% 
% The master form of "editimage" displays the input image in a workspace.
% Above the workspace are "License", "Help", and "Quit" buttons, from which one
% may access the license agreement, display online help pages, and quit the
% program, respectively.  To the left of the image workspace are two subform
% buttons labeled "Files" and "Options".
% 
% Use the "Files" subform button to display the "Input and Output Files" subform.
% From this subform, you may input and output files.
% 
% A number of features are available from the "Options" subform, which
% contains seven panes: "Capture", "Image List", "Display", "Comment", 
% "Colormaps", "Extract ROI", and "Function".
% 
% Beneath the "Options" subform button are five more subform buttons, each
% of which will display the relevant subform.
% 
% The "Zoom" subform lets you zoom in on the image.
% 
% The "Pixel Values" subform prints pixel values as the pointer is moved
% across the image.
% 
% The "Map Values" subform prints map data values as the pointer is moved
% across the image.
% 
% The "Pseudo Color" subform allows you to interactively modify the
% colormap of the image.
% 
% The "Threshold" subform supports pixel clipping and thresholding on the
% image.
%
%  
%
%  EXAMPLES
% % editimage -i image:moon
%
%  "SEE ALSO"
% animate(1), editcmap(1)
% Editimage is covered in Chapter 4 of the Envision Toolbox Manual.
%
%  RESTRICTIONS 
% Currently, the following features are not yet supported:
% - Overlay of Images
% - Use of different colorspaces (CMY, HLS, etc) with the pseudocoloring feature.
%
%  REFERENCES 
% Editimage is documented in much greater detail in Chapter 4, "Editimage", 
% of the Envision Toolbox Manual.
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = keditimage(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = keditimage(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'cmap', '__input';'clip', '__input';'x', -1;'y', -1;'update', 1};
maxval={1,1,1,1000,1000,1};
minval={1,1,1,-1,-1,1};
istoggle=[1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','InputFile','Integer','Integer','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(0);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
callKhoros([w 'editimage"  '],Inputs,narglist);
