%kvdiskstr 'Generates a disk structuring element'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vdiskstr.pane file
%
% Parameters: 
% OutputFile: o 'Output Struc File', required: 'output resulting struc file definition'
% InputFile: trigger 'Trigger Input ', optional: 'trigger input'
% Integer: d 'Disk Diameter ', default: 5: 'diameter of the disk to be created'
% Integer: off 'Nonplanar offset', default: 0: 'value to be added to nonplanar elements'
% MultiChoice: t 'Select Metric', default: 1: 'choose euclidean metric'
% String: t 'Euclidean ', default: 'euclidean': 'choose city-block metric'
% String: t 'City-Block', default: 'city-block': 'choose chessboard metric'
% String: t 'Chessboard', default: 'chessboard': 'lets user choose which kind of disk is to be created'
%    Choices are:
%
% Example: o = kvdiskstr(trigger, {'o','';'trigger','';'d',5;'off',0;'t',1;'t','euclidean';'t','city-block';'t','chessboard'})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vdiskstr - Generates a disk structuring element
%
%  DESCRIPTION
% .I vdiskstr
% generates special structuring elements which are disks in one of three well-known
% metrics (2-D case):
% 
%  _
% Euclidean : D(p,q) = sqrt( (px-qx)^2 + (py-qy)^2 )
% 
%  _
% City-Block: D(p,q) = |px-qx| + |py-qy|
% 
%  _
% Chessboard: D(p,q) = max( |px-qx| , |py-qy| )
% 
% Disks in each one of the above metrics are respectively circles,
% diamonds and squares. For a concise review of this subject, see Gonzales &
% Wintz, "Digital Image Processing", chapter 2.
% 
% The disks generated may be planar or nonplanar, 2-dimensional or 3-dimensional.
% The default is euclidean planar 2-D.
% 
% The offset makes sense only for the nonplanar case, in which case the value
% specified is added to the element. If no offset or 0 is specified, the element
% values will be adjusted so as to have zero in the borders. For example, a
% 5x5 chessboard nonplanar 2-D element will look like this:
%                           0 0 0 0 0
%                           0 1 1 1 0
%                           0 1 2 1 0
%                           0 1 1 1 0
%                           0 0 0 0 0
% 
% The disk-like structuring elements  are very useful in many morphological operations
% such as  distance transforms, granulometry, skeleton algorithms etc.
%
%  
%
%  EXAMPLES
% 
% vdiskstr -r 3  -t "city-block" 
% Creates a 2-D disk-like structuring element of radius 3 according to the
% city-block metric.
%
%  "SEE ALSO"
% lvdiskstr(3)
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993-1997 Junior Barrera, Roberto Lotufo.  All rights reserved.
% 


function varargout = kvdiskstr(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvdiskstr(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'o', '__output';'trigger', '__input';'d', 5;'off', 0;'t', 1;'t', 'euclidean';'t', 'city-block';'t', 'chessboard'};
maxval={0,1,2,0,0,0,0,0};
minval={0,1,2,0,0,0,0,0};
istoggle=[0,1,0,0,0,1,1,1];
was_set=istoggle * 0;
paramtype={'OutputFile','InputFile','Integer','Integer','MultiChoice','String','String','String'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vdiskstr"  '],Inputs,narglist);
