%kggencmap 'Create a Visualization Colormap'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros ggencmap.pane file
%
% Parameters: 
% Integer: n 'Number of entries in vis colormap ', default: 256: 'number of entries in the vis colormap.'
% OutputFile: outf 'Output Vis Colormap', required: 'output vis colormap'
% Toggle: use_hsv 'Color specification in HSV space', default: 0: 'color parameters in HSV space'
% Double: hs 'Hue Start ', default: 0: 'hue start value'
% Double: he 'Hue End ', default: 1: 'hue end value'
% Double: ss 'Sat Start ', default: 1: 'saturation start value'
% Double: se 'Sat End ', default: 1: 'saturation end value'
% Double: vs 'Val Start ', default: 1: 'value start value'
% Double: ve 'Val End ', default: 1: 'value end value'
% Toggle: use_rgb 'Color specification in RGB space', default: 0: 'color parameters in RGB space'
% Double: rs 'Red Start ', default: 0: 'red start value'
% Double: re 'Red End ', default: 1: 'red end value'
% Double: gs 'Green Start ', default: 1: 'green start value'
% Double: ge 'Green End ', default: 1: 'green end value'
% Double: bs 'Blue Start ', default: 1: 'blue start value'
% Double: be 'Blue End ', default: 1: 'blue end value'
% Toggle: use_alpha 'Add alpha channel to colormap (0==transparent, 1==opaque)', default: 0: 'include opacity info in alpha channel of colormap'
% Double: as 'Alpha Start ', default: 0: 'alpha start value'
% Double: ae 'Alpha End ', default: 1: 'alpha end value'
% Double: minval 'Minimum value ', default: 0: 'value used for minimum bracket value in vis colormap'
% Double: maxval 'Maximum Value ', default: 255: 'value assioated with maximum bracket value in map.'
% InputFile: i 'Input Data', optional: 'input data'
% Double: std_dev_scale 'Number of Std.Deviations', default: 3: 'Scale applied to computed standard deviation in setting min/max values.'
%
% Example: outf = kggencmap(i, {'n',256;'outf','';'use_hsv',0;'hs',0;'he',1;'ss',1;'se',1;'vs',1;'ve',1;'use_rgb',0;'rs',0;'re',1;'gs',1;'ge',1;'bs',1;'be',1;'use_alpha',0;'as',0;'ae',1;'minval',0;'maxval',255;'i','';'std_dev_scale',3})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% ggencmap - Create a Visualization Colormap
%
%  DESCRIPTION
% .B ggencmap 
% is used to create a "visualization colormap."
% A "visualization colormap" is different from a garden variety
% colormap in one important way.  The visualization colormap uses
% a part of the location segment to indicate how colors are
% mapped from scalar data.  In normal colormaps, a "pixel" value
% is used as an index into the colormap, producing some new value(s).
% Using this scheme, it is not possible to have perform mapping
% functions on floating point or large integer data.
% 
% The visualization colormap uses values in the location segment
% which effectively "bracket" entries in the map.  In other words,
% the user may define a range of values which map to a particular
% map entry, thus producing non-linear and discontinuous mapping
% or transfer functions.
% 
% The transfer function, or brackets, as computed by this kroutine
% is linear, and evenly spread across the number of colormap
% entries.  Two methods of computation are provided:
% 
% The default method is to compute the minimum and maximum values for
% the transfer function such that each is two standard deviations away
% from the mean of a dataset (which is required if this method is
% chosen).
% 
% The default method is to require the user to provide the minimum
% and maximum values for the transfer function as input to this kroutine.
% 
% The color information in the colormap may be specified in either RGB
% or HSV space, each of which has it's own advantages and disadvantages.
% The alpha, or opacity, channel is optionally specified seperately from
% the color information.  
% 
% Many of the visualization modules in the Geometry toolbox
% make use of the visualization colormap.  Any object which meets the
% following criteria can be used as a visualization colormap (the
% magic cookie restriction has been lifted, but colormaps with the
% magic cookie will still be processed):
% 
% Width = Number of map entries
% Height=Depth=1
% Elements=3 or 4 (3==RGB, 4==RGBA)
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996,1997 , The Regents of the University of California.  All rights reserved.
% 


function varargout = kggencmap(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kggencmap(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'n', 256;'outf', '__output';'use_hsv', 0;'hs', 0;'he', 1;'ss', 1;'se', 1;'vs', 1;'ve', 1;'use_rgb', 0;'rs', 0;'re', 1;'gs', 1;'ge', 1;'bs', 1;'be', 1;'use_alpha', 0;'as', 0;'ae', 1;'minval', 0;'maxval', 255;'i', '__input';'std_dev_scale', 3};
maxval={512,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,2};
minval={2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2};
istoggle=[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
was_set=istoggle * 0;
paramtype={'Integer','OutputFile','Toggle','Double','Double','Double','Double','Double','Double','Toggle','Double','Double','Double','Double','Double','Double','Toggle','Double','Double','Double','Double','InputFile','Double'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'ggencmap"  '],Inputs,narglist);
