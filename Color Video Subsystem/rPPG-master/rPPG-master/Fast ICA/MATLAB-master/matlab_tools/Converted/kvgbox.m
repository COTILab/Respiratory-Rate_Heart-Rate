%kvgbox 'Create Image of Parallelogram Projected onto CCD Sensor (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vgbox.pane file
%
% Parameters: 
% InputFile: trigger 'Trigger Input', optional: 'trigger input'
% Integer: r 'Number of Rows ', default: 512: 'Number of Rows (Height in pixels) of the CCD sensor'
% Integer: c 'Number of Columns ', default: 512: 'Number of Columns (Width in pixels) of the CCD sensor'
% Double: px_h 'Pixel Height ', default: 1: 'Active Pixel Height (vertical) '
% Double: px_w 'Pixel Width ', default: 1: 'Active Pixel Width (horizontal) '
% Double: px_y_off 'Pixel Downward Offset ', default: 0: 'Active Pixel offset from the top of the cell'
% Double: px_x_off 'Pixel Right Offset ', default: 0: 'Active Pixel offset from the left of the cell'
% Double: h 'Box Y Height ', default: 40.3: 'Height of the parallelogram (box) (in pixel unit)'
% Double: w 'Box X Width ', default: 20.6: 'Width of the parallelogram (box) (in pixel unit)'
% Double: im_y_off 'Box Downward Offset ', default: 0: 'Downward offset of box (0 is CCD center = box center)'
% Double: im_x_off 'Box Right Offset ', default: 0: 'Right offset of box (0 is CCD center = box center)'
% Double: angle 'Box Rotation Angle ', default: 15: 'Box rotation (clockwise degrees, center = box center)'
% Double: corner_angl 'Box Corner Angle ', default: 90: 'the value of the 1st corner angle (degrees)'
% Integer: g_o 'Outside Box Pixels Value', default: 10: 'Grey level of the background pixels outside of box'
% Integer: g_i 'Inside Box Pixels Value', default: 200: 'Grey level of the lighted pixels inside of box'
% OutputFile: o 'Output Image Name', required: 'resulting output image'
%
% Example: o = kvgbox(trigger, {'trigger','';'r',512;'c',512;'px_h',1;'px_w',1;'px_y_off',0;'px_x_off',0;'h',40.3;'w',20.6;'im_y_off',0;'im_x_off',0;'angle',15;'corner_angl',90;'g_o',10;'g_i',200;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vgbox - Create Image of Parallelogram Projected onto CCD Sensor  (K1)
%
%  DESCRIPTION
% This program creates a grey level image file filled with a representation of
% a parallelogram (box) projected on the CCD sensor.
% It calculates the grey level of each pixel from the
% intersection of the theoretical parallelogram and the rectangular
% active area of each sensor-pixel.
% The sensor is made of pixels supposed to be all identical, composed
% of an active rectangular area in a rectangular cell.
% 
% 14 optional parameters can be defined:
% 
%  "For the sensor:" 5
% its number of columns (=rows_size) and number of rows (=cols_size),
% the size of each pixel active area,
% the position of active area on the whole pixel area.
% 
%  "For the parallelogram:" 5
% X and Y sizes,
% its position (horizontal and vertical shifts),
% its rotation (in degrees).
% its shape (parallelogram).
% The grey levels of full lighted pixels and full dark pixels.
% 
% 
%  "Speed:" 5
% about 0.5 ms  /pixel on a Sun 3.
% about 0.04 ms /pixel on a Sun 4 sparc station IPC.
% 
%  "Warning:" 5
% The X and Y sizes of the parallelogram is the Euclidean distances
% between the parallel lines.
% 
%  "Update:" 5
% August 1991 : new optional parameter for parallelogram
% 
% The trigger input can be used to cause
% .I vgbox
% to re-execute when used inside cantata. No image is read from this input.
%
%  
%
%  EXAMPLES
% vgbox -o image.xv
% 
% Will create an xv image "image.xv" with defaults parameters.
% 
% vgbox -o box1.xv -r 64 -c 64 -px_w 0.7 -px_h 0.8 -px_x_off 0.1 -px_y_off 0.15
% 
% Will create a square xv image "box1.xv" 64*64 pixels with the default box.
% Each CCD pixel have an active area of 70% * 80% and is shift 10% of a pixel width
% on the right and 15% downward of a pixel height from the top-left corner
% of its pixel cell.
% 
% vgbox -o box2.xv -r 64 -c 32 -w 10.5 -h 40.3 -im_x_off 20.4 -im_y_off -10.6 -angle 5.1
% 
% Will create an xv image "box2.xv" 64 rows by 32 columns  with a rectangular
% box of 10.5 * 40.3 pixels. The box is 20.4 on the right and 10.6 upward, the
% rotation is 5.1 degrees clockwise..
% 
% vgbox -o image.xv -corner_angl 60
% 
% Will create an xv image "image.xv" not a rectangular box but a parallelogram.
%
%  "SEE ALSO"
% lvgbox
%
%  RESTRICTIONS 
% Pixel width + pixel offset must be equal or less than 1.000.
% 
% The CCD cells are supposed square in order to obtain the asked angles.
% 
% For a parallelepipedic box, the width and height sizes of the box are the
% Euclidean distances between the parallel lines.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvgbox(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvgbox(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'trigger', '__input';'r', 512;'c', 512;'px_h', 1;'px_w', 1;'px_y_off', 0;'px_x_off', 0;'h', 40.3;'w', 20.6;'im_y_off', 0;'im_x_off', 0;'angle', 15;'corner_angl', 90;'g_o', 10;'g_i', 200;'o', '__output'};
maxval={1,1,1,1,1,1,1,1,2,0,0,0,179.999,255,255,0};
minval={1,1,1,0,0,0,0,1,2,0,0,0,1e-06,0,0,0};
istoggle=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','Integer','Double','Double','Double','Double','Double','Double','Double','Double','Double','Double','Integer','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vgbox"  '],Inputs,narglist);
