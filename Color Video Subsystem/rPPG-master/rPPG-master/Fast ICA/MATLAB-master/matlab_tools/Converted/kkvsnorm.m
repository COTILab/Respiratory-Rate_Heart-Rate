%kkvsnorm 'Compute surface normal vectors in voxel/object space (volume) '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros kvsnorm.pane file
%
% Parameters: 
% InputFile: i1 '3D Data', required: 'Input scene (gray or binary scene)'
% InputFile: i2 'Coordinates', required: 'Coordinates at z-buffer distance (surface)'
% OutputFile: o 'Normal Vectors', required: 'Surface normal vectors in voxel/object space'
%
% Example: o = kkvsnorm({i1, i2}, {'i1','';'i2','';'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% kvsnorm - Compute voxel space normals
%
%  DESCRIPTION
% The "kvsnorm" operator computes voxel space normal vectors based on the 
% object voxel values
% at the neighborhood of given coordinates.
% The coordinate input file is an image w x h x 1 x 1 x 3 containing the 
% coordinates x,y and
% z, and can be generated optionally by the routine kzbuff. The scene input file
% is an image ws x hs x ds x ts x 1. 
% 
% The output is an image w x h x 1 x 1 x 3 of data storage type KFLOAT, where 
% w and h are the same as in the coordinate input file. For each pixel in the 
% z-buffer, a normal 
% vector is computed and its components in x,y,z directions are stored with
% inverted signals, as expected by the operator kshad.
% 
% N(u,v) = (Nx, Ny, Nz)
% Nx = [f(x+1,y,z)-f(x-1,y,z)]/2
% Ny = [f(x,y-1,z)-f(x,y+1,z)]/2
% Nz = [f(x,y,z-1)-f(x,y,z+1)]/2
% where
% f is the density in the scene input object and the coordinates x,y and z
% are taken from the coordinate input object at position (u,v).
% 
% Negative values in the coordinate file are interpreted as points which are
% out of the object, and null vectors are generated in these cases.
%
%  
%
%  EXAMPLES
% kvsnorm -i1 scene.viff -i2 coord.viff -o normal.viff
% 
% computes the
% normal vectors for each pixel in "coord.viff", according to the neighborhood
% of the voxel addressed by the coordinate in the scene.
%
%  "SEE ALSO"
% kzbuff, kisnorm, kvsnorm, ktextu, kvoxext
%
%  RESTRICTIONS 
% The input objects must have only the value segment. 
% 
% The input object scene can not have dimention e > 1. The input object 
% coordinate must have dimention e=3.
% 
% The input object scene can not be of data type KCOMPLEX.
% The input object coordinate can not be of data types KBIT, KFLOAT, KDOUBLE
% and KCOMPLEX.
% 
% In case of t > 1 in the input objects, the operator will be applied to the time
% t=0 only.
% 
% None of the input and output objects are referenced, therefore some attributes
% may change, as the VALUE_POSITION, for example.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993, 1994, 1995 UNICAMP, R A Lotufo,  All rights reserved.
% 


function varargout = kkvsnorm(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kkvsnorm(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i1', '__input';'i2', '__input';'o', '__output'};
maxval={0,0,0};
minval={0,0,0};
istoggle=[0,0,0];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'kvsnorm"  '],Inputs,narglist);
