%kvgamth 'Generate a Binary Image by Thresholding a Color Image (K1)'
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros vgamth.pane file
%
% Parameters: 
% InputFile: i 'Input Image ', required: 'input image'
% Integer: b 'High Threshold Map Column 1 (RED) ', default: 128: 'high threshold for map column 1'
% Integer: c 'Low Threshold Map Column 1 (RED) ', default: 128: 'low threshold for map column 1'
% Integer: d 'High Threshold Map Column 2 (GREEN)', default: 128: 'high threshold for map column 2'
% Integer: e 'Low Threshold Map Column 2 (GREEN) ', default: 128: 'low threshold for map column 2'
% Integer: f 'High Threshold Map Column 3 (BLUE) ', default: 128: 'high threshold for map column 3'
% Integer: g 'Low Threshold Map Column 3 (BLUE) ', default: 128: 'low threshold for map column 3'
% Integer: v 'Non-Zero Output Value ', default: 128: 'non-zero output value'
% OutputFile: o 'Output Image', required: 'resulting image'
%
% Example: o = kvgamth(i, {'i','';'b',128;'c',128;'d',128;'e',128;'f',128;'g',128;'v',128;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% vgamth - Generate a Binary Image by Thresholding a Color Image  (K1)
%
%  DESCRIPTION
% .I vgamth
% generates a binary image by thresholding a pseudo color input image.
% The result image is of data type BYTE, and the input image must also
% be of type BYTE.
% 
% The output pixel is given the specified value if:
% 1) only the lower value option is given and the pixel
% value is larger then the lower threshold,
% 2) only the upper value option is given and the pixel
% value is less than the upper threshold,
% 3) the upper value and lower value options are given and the pixel
% value is between the upper and lower threshold,
% or
% 4) same as 3 but both thresholds are equal and the pixel
% value is same as the threshold level.
% Otherwise, the output pixel is given a zero value.
% 
% The input image must contain a map with three columns
% The thresholding is actually performed
% on the maps; thus the input image must have a map scheme of
% FORCE, and the map data type must be BYTE.
% 
% By choosing the appropriate limits is it possible to identify
% areas in an image that are above or below a certain value, or to
% isolate certain bands of intensities in each color map. There are
% many different combinations that can be used to produce the results
% required.
% 
% Note that this type of image is NOT a Khoros BIT image!
% The output image is of the data type BYTE, but the only
% pixel values are 0 and non-zero.
%
%  
%
%  EXAMPLES
% vgamth -i input.image -o output.image -b 125 -c 75 -d 125 -e 75 -f 125 -g 75
% -v 100
% 
% This command performs a threshold on input.image and stores the
% result in output.image.  All pixel values between 75 and 125 are 
% given the value 100 in the output image.  All pixel values that
% do not fall within this range are give the value 0.
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
% .I vgamth
% will only operate on 1 band images of data storage type BYTE, with the
% map enable FORCE, and map data type BYTE.
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1993 - 1997, Khoral Research, Inc. ("KRI")  All rights reserved.
% 


function varargout = kvgamth(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = kvgamth(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'b', 128;'c', 128;'d', 128;'e', 128;'f', 128;'g', 128;'v', 128;'o', '__output'};
maxval={0,255,255,255,255,255,255,255,0};
minval={0,0,0,0,0,0,0,0,0};
istoggle=[0,1,1,1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','Integer','Integer','Integer','Integer','Integer','Integer','Integer','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'vgamth"  '],Inputs,narglist);
