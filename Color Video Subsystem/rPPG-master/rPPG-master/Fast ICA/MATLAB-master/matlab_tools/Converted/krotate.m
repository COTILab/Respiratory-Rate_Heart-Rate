%krotate 'rotates a 3D Image in space '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros rotate.pane file
%
% Parameters: 
% InputFile: i 'Input ', required: 'First Input data object'
% InputFile: v 'Vector file', optional: 'File with ascii coordinates of three matching points'
% Toggle: center 'but use center', default: 0: 'if given : determine only the angles from vectorfile and use center given below'
% InputFile: icorrel 'correlation input', optional: 'determine exact angle and center from this input, use given angles as starting point'
% Double: phase 'PhaseFac', default: 1: 'rotation angle (deg) about X-axis'
% InputFile: tangle 'turning angle input', optional: 'KDF File with AngleX, AngleY, AngleZ in X-direction in it'
% Double: width 'Start Width', default: 10: 'starting width to find best position'
% OutputFile: rangle 'Angle Output', optional: 'Writes a KDF File with calculated angles in it. Only when correlation file is used'
% Toggle: op 'only about Z', default: 0: 'if selected rotational alignment will only be about Z axis'
% Toggle: successive 'Successive Alignment', default: 0: 'if activated, each ELEMENT will be allilgned with the previous one.'
% Double: aX 'Angle about X', default: 0: 'rotation angle (deg) about X-axis'
% Double: aY 'Y', default: 0: 'rotation angle (deg) about Y-axis'
% Double: aZ 'Z', default: 0: 'rotation angle (deg) about Z-axis'
% Toggle: xstretch 'Scale X', default: 0: 'if activated, the X-Scaling will be optimized'
% Double: cX 'Center X', default: 0: 'center of rotation coordinates'
% Double: cY 'Y', default: 0: 'center of rotation coordinates'
% Double: cZ 'Z', default: 0: 'center of rotation coordinates'
% Toggle: ystretch 'Scale Y', default: 0: 'if activated, the Y-Scaling will be optimized'
% Double: sX 'Scale X', default: 1: 'scaling X'
% Double: sY 'Y', default: 1: 'scaling Y'
% Double: sZ 'Z', default: 1: 'scaling Z'
% Toggle: zstretch 'Scale Z', default: 0: 'if activated, the Z-Scaling will be optimized'
% OutputFile: o 'Output', required: 'Resulting output data object'
%
% Example: [rangle, o] = krotate({i, v, icorrel, tangle}, {'i','';'v','';'center',0;'icorrel','';'phase',1;'tangle','';'width',10;'rangle','';'op',0;'successive',0;'aX',0;'aY',0;'aZ',0;'xstretch',0;'cX',0;'cY',0;'cZ',0;'ystretch',0;'sX',1;'sY',1;'sZ',1;'zstretch',0;'o',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% rotate - rotates a 3D Image in space
%
%  DESCRIPTION
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996-2003, Rainer Heintzmann,  All rights reserved.
% 


function varargout = krotate(varargin)
if nargin ==0
  Inputs={};arglist={'',''};
elseif nargin ==1
  Inputs=varargin{1};arglist={'',''};
elseif nargin ==2
  Inputs=varargin{1}; arglist=varargin{2};
else error('Usage: [out1,..] = krotate(Inputs,arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'i', '__input';'v', '__input';'center', 0;'icorrel', '__input';'phase', 1;'tangle', '__input';'width', 10;'rangle', '__output';'op', 0;'successive', 0;'aX', 0;'aY', 0;'aZ', 0;'xstretch', 0;'cX', 0;'cY', 0;'cZ', 0;'ystretch', 0;'sX', 1;'sY', 1;'sZ', 1;'zstretch', 0;'o', '__output'};
maxval={0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
minval={0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
istoggle=[0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0];
was_set=istoggle * 0;
paramtype={'InputFile','InputFile','Toggle','InputFile','Double','InputFile','Double','OutputFile','Toggle','Toggle','Double','Double','Double','Toggle','Double','Double','Double','Toggle','Double','Double','Double','Toggle','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=1; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'rotate"  -k'],Inputs,narglist);
