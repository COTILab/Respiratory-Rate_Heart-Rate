%kconfospotsim 'simulations gaussian spots and localizes them '
% This MatLab function was automatically generated by a converter (KhorosToMatLab) from the Khoros confospotsim.pane file
%
% Parameters: 
% Integer: s 'Number of Simulations', default: 1: 'each time a new poisson statistic is applied'
% Double: w 'Gauss width', default: 3: 'width of gaussian peaks'
% Integer: mX 'Size X', default: 128: 'size of simulated image'
% Integer: mY 'Y', default: 128: 'size of simulated image'
% Integer: mZ 'Z', default: 32: 'size of simulated image'
% Integer: pX 'PSF Size X', default: 32: 'size of psf-array'
% Integer: pY 'Y', default: 32: 'size of psf-array'
% Integer: pZ 'Z', default: 32: 'size of psf-array'
% Double: pf 'Resolution factor', default: 2: 'enlargement factor for psf'
% Integer: m 'Max Number of Spots', default: 5: 'Maximal number of spots to find'
% Integer: sr 'True Number of Spots', default: 2: 'Number of spots to be simulated'
% Double: b 'Background', default: 1: 'background value for simulation'
% Double: is 'Intensity Scaling', default: 100: 'scaling value for intensity (without background)'
% Double: n 'Limit', default: 5: 'below this spots are deleted'
% Double: ps 'Position Scaling', default: 1: 'scaling value for position vectors'
% Integer: a 'IterAtEnd', default: 10: 'final iterations'
% Double: c 'NewSpot', default: 0.1: 'smalles correction for adding new spots'
% Double: t 'DelLimit', default: 20: 'below this spots are deleted'
% OutputFile: o 'ASCII Output', optional: 'for difference vectors'
% OutputFile: simm 'Simulated Measured Image', optional: 'output of noisy image'
% OutputFile: sim 'Simulated Image', optional: 'output'
% OutputFile: r 'Remain Image', optional: 'output'
%
% Example: [o, simm, sim, r] = kconfospotsim( {'s',1;'w',3;'mX',128;'mY',128;'mZ',32;'pX',32;'pY',32;'pZ',32;'pf',2;'m',5;'sr',2;'b',1;'is',100;'n',5;'ps',1;'a',10;'c',0.1;'t',20;'o','';'simm','';'sim','';'r',''})
%
% Khoros helpfile follows below:
%
%  PROGRAM
% confospotsim - simulations gaussian spots and localizes them
%
%  DESCRIPTION
%
%  
%
%  EXAMPLES
%
%  "SEE ALSO"
%
%  RESTRICTIONS 
%
%  REFERENCES 
%
%  COPYRIGHT
% Copyright (C) 1996-2003, Rainer Heintzmann,  All rights reserved.
% 


function varargout = kconfospotsim(varargin)
Inputs={};
if nargin ==0
  arglist={'',''};
elseif nargin ==1
  arglist=varargin{1};
else error('Usage: [out1,..] = kconfospotsim(arglist).');
end
if size(arglist,2)~=2
  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')
 end
narglist={'s', 1;'w', 3;'mX', 128;'mY', 128;'mZ', 32;'pX', 32;'pY', 32;'pZ', 32;'pf', 2;'m', 5;'sr', 2;'b', 1;'is', 100;'n', 5;'ps', 1;'a', 10;'c', 0.1;'t', 20;'o', '__output';'simm', '__output';'sim', '__output';'r', '__output'};
maxval={1000,10,1024,1024,1024,1024,1024,1024,0,1000,1000,0,0,0,0,1024,0,0,1,1,1,1};
minval={1,0.1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1};
istoggle=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1];
was_set=istoggle * 0;
paramtype={'Integer','Double','Integer','Integer','Integer','Integer','Integer','Integer','Double','Integer','Integer','Double','Double','Double','Double','Integer','Double','Double','OutputFile','OutputFile','OutputFile','OutputFile'};
% identify the input arrays and assign them to the arguments as stated by the user
if ~iscell(Inputs)
Inputs = {Inputs};
end
NumReqOutputs=0; nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  wasmatched=0;
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})  % a given argument was matched to the possible arguments
     wasmatched = 1;
     was_set(jj) = 1;
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > length(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = 'OK_in';
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      if (isempty(arglist{ii,2}))
        narglist{jj,2} = 'OK_out';
      else
        narglist{jj,2} = arglist{ii,2};
      end

      nextoutput = nextoutput + 1;
      if (minval{jj} == 0)  
         NumReqOutputs = NumReqOutputs - 1;
      end
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if strcmp(paramtype{jj}, 'Integer') & (round(arglist{ii,2}) ~= arglist{ii,2})
            error(['Argument ' arglist{ii,1} ' is of integer type but non-integer number ' arglist{ii,2} ' was supplied']);
        end
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} < minval{jj})
            error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
          elseif (minval{jj} ~= maxval{jj} & arglist{ii,2} > maxval{jj})
            error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
          end
        end
     end
     if ~strcmp(narglist{jj,2},'OK_out') &  ~strcmp(narglist{jj,2},'OK_in') 
       narglist{jj,2} = arglist{ii,2};
     end
   end
   end
   if (wasmatched == 0 & ~strcmp(arglist{ii,1},''))
        error(['Argument ' arglist{ii,1} ' is not a valid argument for this function']);
   end
end
% match the remaining inputs/outputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if  strcmp(paramtype{jj}, 'Toggle')
        if (narglist{jj,2} ==0)
          narglist{jj,1} = ''; 
        end;
        narglist{jj,2} = ''; 
     end;
     if  ~strcmp(narglist{jj,2},'__input') && ~strcmp(narglist{jj,2},'__output') && istoggle(jj) && ~ was_set(jj)
          narglist{jj,1} = ''; 
          narglist{jj,2} = ''; 
     end;
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)  % meaning this input is required
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        end
      else  % this is an optional input
        if (nextinput <= length(Inputs)) 
          narglist{jj,2} = 'OK_in';
          nextinput = nextinput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0) % this is a required output
        if (nextoutput > nargout & nargout > 1) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
          NumReqOutputs = NumReqOutputs-1;
        end
      else % this is an optional output
        if (nargout - nextoutput >= NumReqOutputs) 
          narglist{jj,2} = 'OK_out';
          nextoutput = nextoutput + 1;
        else 
          narglist{jj,1} = '';
          narglist{jj,2} = '';
        end;
      end
     end
  end
end
if nargout
   varargout = cell(1,nargout);
else
  varargout = cell(1,1);
end
global KhorosRoot
if exist('KhorosRoot') && ~isempty(KhorosRoot)
w=['"' KhorosRoot];
else
if ispc
  w='"C:\Program Files\dip\khorosBin\';
else
[s,w] = system('which cantata');
w=['"' w(1:end-8)];
end
end
[varargout{:}]=callKhoros([w 'confospotsim"  -k'],Inputs,narglist);
